{"id":47173,"name":"URMGT_2020.1.7.1_master","status":"active","createdOn":"2020-01-07T10:58:17.733Z","modifiedOn":"2020-01-07T10:58:17.733Z","modifiedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"createdBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"createdFor":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"environments":[{"id":524371,"releaseId":47173,"name":"DEV","status":"succeeded","variables":{},"variableGroups":[],"preDeployApprovals":[{"id":655294,"revision":1,"approvalType":"preDeploy","createdOn":"2020-01-07T10:58:18.22Z","modifiedOn":"2020-01-07T10:58:18.227Z","status":"approved","comments":"","isAutomated":true,"isNotificationOn":false,"trialNumber":1,"attempt":1,"rank":1,"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{}},"releaseEnvironment":{"id":524371,"name":"DEV","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371","_links":{}},"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/approvals/655294"}],"postDeployApprovals":[{"id":655320,"revision":1,"approvalType":"postDeploy","createdOn":"2020-01-07T11:07:08.41Z","modifiedOn":"2020-01-07T11:07:08.42Z","status":"approved","comments":"","isAutomated":true,"isNotificationOn":false,"trialNumber":1,"attempt":1,"rank":3,"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{}},"releaseEnvironment":{"id":524371,"name":"DEV","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371","_links":{}},"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/approvals/655320"}],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[{"id":655295,"deploymentId":239373,"attempt":1,"reason":"automated","status":"succeeded","operationStatus":"Approved","releaseDeployPhases":[{"id":279846,"phaseId":"279846","name":"Agent phase","rank":1,"phaseType":"agentBasedDeployment","status":"succeeded","runPlanId":"61b1cbe4-7fba-464d-b1e7-1b9f869b131c","deploymentJobs":[{"job":{"id":9,"timelineRecordId":"4d18c66e-d0b3-5f40-ac24-7c3d349e30aa","name":"Agent phase","dateStarted":"2020-01-07T10:58:25.4466667Z","dateEnded":"2020-01-07T11:07:06.55Z","startTime":"2020-01-07T10:58:25.4466667Z","finishTime":"2020-01-07T11:07:06.55Z","status":"succeeded","rank":1,"issues":[],"agentName":"vstsoctodep02b","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371/deployPhases/279846/tasks/9/logs"},"tasks":[{"id":3,"timelineRecordId":"f1c57bcd-72b2-484e-82d1-a29d5a4e1160","name":"Initialize job","dateStarted":"2020-01-07T10:58:26.51Z","dateEnded":"2020-01-07T10:58:26.73Z","startTime":"2020-01-07T10:58:26.51Z","finishTime":"2020-01-07T10:58:26.73Z","status":"succeeded","rank":1,"issues":[],"agentName":"vstsoctodep02b","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371/deployPhases/279846/tasks/3/logs"},{"id":4,"timelineRecordId":"b3774e48-eeac-5d28-d013-aa829b8dd7d5","name":"Download artifact - URMGT - drop","dateStarted":"2020-01-07T10:58:26.7533333Z","dateEnded":"2020-01-07T10:58:32.4433333Z","startTime":"2020-01-07T10:58:26.7533333Z","finishTime":"2020-01-07T10:58:32.4433333Z","status":"succeeded","rank":2,"issues":[],"task":{"id":"a433f589-fce1-4460-9ee6-44a624aeb1fb","name":"DownloadBuildArtifacts","version":"0.156.1"},"agentName":"vstsoctodep02b","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371/deployPhases/279846/tasks/4/logs"},{"id":5,"timelineRecordId":"a09455ef-8c07-5607-c469-6a408378f521","name":"Download artifact - URMGT - SeleniumTests","dateStarted":"2020-01-07T10:58:32.4633333Z","dateEnded":"2020-01-07T10:58:36.27Z","startTime":"2020-01-07T10:58:32.4633333Z","finishTime":"2020-01-07T10:58:36.27Z","status":"succeeded","rank":3,"issues":[],"task":{"id":"a433f589-fce1-4460-9ee6-44a624aeb1fb","name":"DownloadBuildArtifacts","version":"0.156.1"},"agentName":"vstsoctodep02b","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371/deployPhases/279846/tasks/5/logs"},{"id":6,"timelineRecordId":"90ac9a20-88ee-5ae7-a141-381c0927d52f","name":"Release Header","dateStarted":"2020-01-07T10:58:36.2833333Z","dateEnded":"2020-01-07T10:58:38.4566667Z","startTime":"2020-01-07T10:58:36.2833333Z","finishTime":"2020-01-07T10:58:38.4566667Z","status":"succeeded","rank":4,"issues":[],"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","name":"CmdLine","version":"2.151.2"},"agentName":"vstsoctodep02b","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371/deployPhases/279846/tasks/6/logs"},{"id":7,"timelineRecordId":"c420f355-ddda-5428-947d-d7a1272adddf","name":"Deploy Octopus Release","dateStarted":"2020-01-07T10:58:38.4666667Z","dateEnded":"2020-01-07T11:07:06.4333333Z","startTime":"2020-01-07T10:58:38.4666667Z","finishTime":"2020-01-07T11:07:06.4333333Z","status":"succeeded","rank":5,"issues":[],"task":{"id":"8ca1d96a-151d-44b7-bc4f-9251e2ea6971","name":"OctopusDeployRelease","version":"4.1.415"},"agentName":"vstsoctodep02b","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371/deployPhases/279846/tasks/7/logs"},{"id":8,"timelineRecordId":"49e1a861-ceaa-49c3-9286-cfbb70c0998d","name":"Finalize Job","dateStarted":"2020-01-07T11:07:06.4533333Z","dateEnded":"2020-01-07T11:07:06.5333333Z","startTime":"2020-01-07T11:07:06.4533333Z","finishTime":"2020-01-07T11:07:06.5333333Z","status":"succeeded","percentComplete":100,"rank":6,"issues":[],"agentName":"vstsoctodep02b","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524371/deployPhases/279846/tasks/8/logs"}]}],"manualInterventions":[],"startedOn":"2020-01-07T10:58:21.93Z"}],"requestedBy":{"displayName":"Microsoft.VisualStudio.Services.ReleaseManagement","id":"0000000d-0000-8888-8000-000000000000","uniqueName":"0000000d-0000-8888-8000-000000000000@2c895908-04e0-4952-89fd-54b0046d6288","descriptor":"s2s.MDAwMDAwMGQtMDAwMC04ODg4LTgwMDAtMDAwMDAwMDAwMDAwQDJjODk1OTA4LTA0ZTAtNDk1Mi04OWZkLTU0YjAwNDZkNjI4OA"},"requestedFor":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"queuedOn":"2020-01-07T10:58:17.947Z","lastModifiedBy":{"displayName":"Microsoft.VisualStudio.Services.ReleaseManagement","id":"0000000d-0000-8888-8000-000000000000","uniqueName":"0000000d-0000-8888-8000-000000000000@2c895908-04e0-4952-89fd-54b0046d6288","descriptor":"s2s.MDAwMDAwMGQtMDAwMC04ODg4LTgwMDAtMDAwMDAwMDAwMDAwQDJjODk1OTA4LTA0ZTAtNDk1Mi04OWZkLTU0YjAwNDZkNjI4OA"},"lastModifiedOn":"2020-01-07T11:07:08.587Z","hasStarted":true,"tasks":[],"runPlanId":"00000000-0000-0000-0000-000000000000","issues":[]}],"rank":1,"definitionEnvironmentId":3574,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":true,"name":"ReleaseStarted","conditionType":"event","value":""}],"createdOn":"2020-01-07T10:58:17.947Z","modifiedOn":"2020-01-07T11:07:08.42Z","workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":242,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Release Header","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"echo * * * * * * * * * * \necho * * * * * * * * * * Definition: $(Release.DefinitionName)($(Release.DefinitionId))  \necho * * * * * * * * * * Current Release: $(Release.ReleaseName) \necho * * * * * * * * * * Requested For: $(Release.RequestedFor) \necho * * * * * * * * * * Deployment To $(Release.EnvironmentName)\necho * * * * * * * * * * Build: $(Build.BuildNumber) \necho * * * * * * * * * *","workingDirectory":"","failOnStderr":"false"}},{"taskId":"8ca1d96a-151d-44b7-bc4f-9251e2ea6971","version":"4.*","name":"Deploy Octopus Release","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctoConnectedServiceName":"3df7f17b-e95f-4ada-8617-24e3a1888afb","Space":"Spaces-1","Project":"$(OctopusProjectName)","ReleaseNumber":"$(Build.BuildNumber)","Environments":"Development","ShowProgress":"true","DeployForTenants":"","DeployForTenantTags":"","AdditionalArguments":"--deploymenttimeout=02:00:00"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"ReleaseStarted","timeToDeploy":8.8327833333333334,"processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]}},{"id":524372,"releaseId":47173,"name":"Product Tests (DEV)","status":"rejected","variables":{},"variableGroups":[],"preDeployApprovals":[{"id":655321,"revision":1,"approvalType":"preDeploy","createdOn":"2020-01-07T11:07:08.76Z","modifiedOn":"2020-01-07T11:07:08.767Z","status":"approved","comments":"","isAutomated":true,"isNotificationOn":false,"trialNumber":1,"attempt":1,"rank":1,"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{}},"releaseEnvironment":{"id":524372,"name":"Product Tests (DEV)","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372","_links":{}},"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/approvals/655321"}],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[{"id":655322,"deploymentId":239383,"attempt":1,"reason":"automated","status":"failed","operationStatus":"PhaseFailed","releaseDeployPhases":[{"id":279859,"phaseId":"279859","name":"Agent phase","rank":1,"phaseType":"agentBasedDeployment","status":"failed","runPlanId":"2a968a86-6539-4672-a3e1-e480ada113b8","deploymentJobs":[{"job":{"id":10,"timelineRecordId":"2bc42fbc-e822-5380-015f-6f7a4e2357e2","name":"Agent phase","dateStarted":"2020-01-07T11:07:14.18Z","dateEnded":"2020-01-07T11:12:33.4066667Z","startTime":"2020-01-07T11:07:14.18Z","finishTime":"2020-01-07T11:12:33.4066667Z","status":"failed","rank":1,"issues":[],"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/10/logs"},"tasks":[{"id":3,"timelineRecordId":"62538e2c-618c-4cd1-b778-bac444042221","name":"Initialize job","dateStarted":"2020-01-07T11:07:14.42Z","dateEnded":"2020-01-07T11:07:14.6133333Z","startTime":"2020-01-07T11:07:14.42Z","finishTime":"2020-01-07T11:07:14.6133333Z","status":"succeeded","rank":1,"issues":[],"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/3/logs"},{"id":4,"timelineRecordId":"b5bbc60c-2370-5fc4-cb7c-64347e63d292","name":"Download artifact - URMGT - drop","dateStarted":"2020-01-07T11:07:14.6333333Z","dateEnded":"2020-01-07T11:07:19.6066667Z","startTime":"2020-01-07T11:07:14.6333333Z","finishTime":"2020-01-07T11:07:19.6066667Z","status":"succeeded","rank":2,"issues":[],"task":{"id":"a433f589-fce1-4460-9ee6-44a624aeb1fb","name":"DownloadBuildArtifacts","version":"0.156.1"},"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/4/logs"},{"id":5,"timelineRecordId":"9efc4557-1baa-53d1-7cd2-c71f2e2e1081","name":"Download artifact - URMGT - SeleniumTests","dateStarted":"2020-01-07T11:07:19.62Z","dateEnded":"2020-01-07T11:07:23.6366667Z","startTime":"2020-01-07T11:07:19.62Z","finishTime":"2020-01-07T11:07:23.6366667Z","status":"succeeded","rank":3,"issues":[],"task":{"id":"a433f589-fce1-4460-9ee6-44a624aeb1fb","name":"DownloadBuildArtifacts","version":"0.156.1"},"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/5/logs"},{"id":6,"timelineRecordId":"501b555b-722a-52de-41e4-4c952cce5ca1","name":"Set Settings DEV environment","dateStarted":"2020-01-07T11:07:23.65Z","dateEnded":"2020-01-07T11:07:25.3166667Z","startTime":"2020-01-07T11:07:23.65Z","finishTime":"2020-01-07T11:07:25.3166667Z","status":"succeeded","rank":4,"issues":[],"task":{"id":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","name":"CmdLine","version":"2.151.2"},"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/6/logs"},{"id":7,"timelineRecordId":"ec59a16d-b4c0-5bd9-8b27-01285c5c053f","name":"VsTest Platform Installer","dateStarted":"2020-01-07T11:07:25.3266667Z","dateEnded":"2020-01-07T11:07:27.09Z","startTime":"2020-01-07T11:07:25.3266667Z","finishTime":"2020-01-07T11:07:27.09Z","status":"succeeded","rank":5,"issues":[],"task":{"id":"2c65196a-54fd-4a02-9be8-d9d1837b7111","name":"VisualStudioTestPlatformInstaller","version":"1.151.1"},"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/7/logs"},{"id":8,"timelineRecordId":"f8a607f1-d07b-55ff-fb71-b099e006f885","name":"VsTest - testAssemblies","dateStarted":"2020-01-07T11:07:27.1Z","dateEnded":"2020-01-07T11:12:33.3666667Z","startTime":"2020-01-07T11:07:27.1Z","finishTime":"2020-01-07T11:12:33.3666667Z","status":"failed","rank":6,"issues":[{"issueType":"Error","message":"Test Run Failed.","data":{"type":"error","logFileLineNumber":"431"}},{"issueType":"Warning","message":"Vstest failed with error. Check logs for failures. There might be failed tests.","data":{"type":"warning","logFileLineNumber":"445"}},{"issueType":"Error","message":"Error: The process 'D:\\ext1\\_tasks\\VSTest_ef087383-ee5e-42c7-9a53-ab56c98420f9\\2.162.6\\Modules\\DTAExecutionHost.exe' failed with exit code 1","data":{"type":"error","logFileLineNumber":"446"}},{"issueType":"Error","message":"Vstest failed with error. Check logs for failures. There might be failed tests.","data":{"type":"error","logFileLineNumber":"447"}}],"task":{"id":"ef087383-ee5e-42c7-9a53-ab56c98420f9","name":"VSTest","version":"2.162.6"},"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/8/logs"},{"id":9,"timelineRecordId":"b88e07db-a027-4a9c-b935-c92598403eec","name":"Finalize Job","dateStarted":"2020-01-07T11:12:33.3866667Z","dateEnded":"2020-01-07T11:12:33.39Z","startTime":"2020-01-07T11:12:33.3866667Z","finishTime":"2020-01-07T11:12:33.39Z","status":"succeeded","percentComplete":100,"rank":7,"issues":[],"agentName":"extatpagent_01","logUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/environments/524372/deployPhases/279859/tasks/9/logs"}]}],"manualInterventions":[],"startedOn":"2020-01-07T11:07:11.207Z"}],"requestedBy":{"displayName":"Microsoft.VisualStudio.Services.ReleaseManagement","id":"0000000d-0000-8888-8000-000000000000","uniqueName":"0000000d-0000-8888-8000-000000000000@2c895908-04e0-4952-89fd-54b0046d6288","descriptor":"s2s.MDAwMDAwMGQtMDAwMC04ODg4LTgwMDAtMDAwMDAwMDAwMDAwQDJjODk1OTA4LTA0ZTAtNDk1Mi04OWZkLTU0YjAwNDZkNjI4OA"},"requestedFor":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"queuedOn":"2020-01-07T11:07:08.63Z","lastModifiedBy":{"displayName":"Microsoft.VisualStudio.Services.ReleaseManagement","id":"0000000d-0000-8888-8000-000000000000","uniqueName":"0000000d-0000-8888-8000-000000000000@2c895908-04e0-4952-89fd-54b0046d6288","descriptor":"s2s.MDAwMDAwMGQtMDAwMC04ODg4LTgwMDAtMDAwMDAwMDAwMDAwQDJjODk1OTA4LTA0ZTAtNDk1Mi04OWZkLTU0YjAwNDZkNjI4OA"},"lastModifiedOn":"2020-01-07T11:12:36.35Z","hasStarted":true,"tasks":[],"runPlanId":"00000000-0000-0000-0000-000000000000","issues":[]}],"rank":2,"definitionEnvironmentId":3575,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":false,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":true,"name":"DEV","conditionType":"environmentState","value":"4"}],"createdOn":"2020-01-07T11:07:08.63Z","modifiedOn":"2020-01-07T11:12:36.34Z","workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":171,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Set Settings DEV environment","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"copy /y $(System.DefaultWorkingDirectory)\\URMGT\\SeleniumTests\\Settings_DEV.xml $(System.DefaultWorkingDirectory)\\URMGT\\SeleniumTests\\Settings.xml","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"2c65196a-54fd-4a02-9be8-d9d1837b7111","version":"1.*","name":"VsTest Platform Installer","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageFeedSelector":"nugetOrg","versionSelector":"latestPreRelease","testPlatformVersion":"","customFeed":"","username":"","password":"","netShare":""}},{"environment":{},"taskId":"ef087383-ee5e-42c7-9a53-ab56c98420f9","version":"2.*","name":"VsTest - testAssemblies","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testSelector":"testAssemblies","testAssemblyVer2":"UserManagement.SeleniumTests.dll","testPlan":"","testSuite":"","testConfiguration":"","tcmTestRun":"$(test.RunId)","searchFolder":"$(System.DefaultWorkingDirectory)\\URMGT\\SeleniumTests\\","testFiltercriteria":"","runOnlyImpactedTests":"False","runAllTestsAfterXBuilds":"50","uiTests":"false","vstestLocationMethod":"version","vsTestVersion":"toolsInstaller","vstestLocation":"","runSettingsFile":"","overrideTestrunParameters":"","pathtoCustomTestAdapters":"$(System.DefaultWorkingDirectory)\\URMGT\\SeleniumTests\\","runInParallel":"False","runTestsInIsolation":"False","codeCoverageEnabled":"False","otherConsoleOptions":"","distributionBatchType":"basedOnTestCases","batchingBasedOnAgentsOption":"autoBatchSize","customBatchSizeValue":"10","batchingBasedOnExecutionTimeOption":"autoBatchSize","customRunTimePerBatchValue":"60","dontDistribute":"False","testRunTitle":"","platform":"","configuration":"","publishRunAttachments":"true","failOnMinTestsNotRun":"False","minimumExpectedTests":"1","diagnosticsEnabled":"True","collectDumpOn":"onAbortOnly","rerunFailedTests":"False","rerunType":"basedOnTestFailurePercentage","rerunFailedThreshold":"30","rerunFailedTestCasesMaxLimit":"5","rerunMaxAttempts":"3"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"After successful deployment of DEV","timeToDeploy":5.457,"processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]}},{"id":524373,"releaseId":47173,"name":"QA","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":3,"definitionEnvironmentId":3576,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":false,"name":"Product Tests (DEV)","conditionType":"environmentState","value":"4"}],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":242,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"taskId":"8ca1d96a-151d-44b7-bc4f-9251e2ea6971","version":"4.*","name":"Deploy Octopus Release","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctoConnectedServiceName":"3df7f17b-e95f-4ada-8617-24e3a1888afb","Space":"Spaces-1","Project":"$(OctopusProjectName)","ReleaseNumber":"$(Build.BuildNumber)","Environments":"QA","ShowProgress":"true","DeployForTenants":"","DeployForTenantTags":"","AdditionalArguments":"--deploymenttimeout=02:30:00"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"After successful deployment of Product Tests (DEV)","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]}},{"id":524374,"releaseId":47173,"name":"Scorecard (DEV)","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":4,"definitionEnvironmentId":3577,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":false,"name":"Product Tests (DEV)","conditionType":"environmentState","value":"132"}],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":171,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase (Score Card validations)","refName":null,"workflowTasks":[{"taskId":"7adcd483-65f8-4eb5-882f-998ec8e1e9bc","version":"3.*","name":"Score Card: Development","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SwaggerUrl":"$(ServiceDevUrl)","SiteUrl":"$(ServiceDevUrl)","ProductName":"","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"cfe7e6d3-72d7-4019-ae74-b5ee364368ea","version":"2.*","name":"Score Card: Test Automation","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SwaggerUrl":"$(ServiceDevUrl)","SwaggerUrlProd":"$(ServiceProdUrl)","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"3953d1e5-4721-497b-a164-04678d0df621","version":"2.*","name":"Score Card: Bentley Connect Services Management","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctopusProject":"$(OctopusProjectId)","OctopusEnvironment":"Development","OctopusService":"3df7f17b-e95f-4ada-8617-24e3a1888afb","AppInsightsService":"0d19964f-7c47-499c-bf0b-45b24c30ad95","SeqService":"5c3e789c-debb-4b77-a9c7-315ec2322106","SeqEnvironment":"Dev","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841","ScorecardReports":"","GrafanaService":"79fd7230-247e-4226-b205-bcdc4d92c303"}},{"taskId":"b17573a4-5226-43a6-a556-62c203be936a","version":"2.*","name":"Score Card: Quality Assurance","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"0273cb44-733f-4250-8e93-141886e6d4db","version":"2.*","name":"Score Card: Security","refName":"","enabled":false,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctopusProject":"$(OctopusProjectId)","SecurityMicrosoftFlowService":"9ff0028f-a2b6-4bf0-bd17-a6a51678f619","SecuritySignOffApiService":"f10b49f3-d904-48c0-b0f8-db63d96c06de","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"c479bbf0-f07d-47c0-b4d2-73cad353313b","version":"1.*","name":"Score Card: Product Management","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SiteUrl":"$(ServiceDevUrl)","LoginData":"90a232dc-a05b-4d6d-aa0e-fddfbd57f1b8","SeqService":"874ee479-6e53-465f-b5a7-92946dcd0493","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"fe69ebf0-c7bf-4d36-9f73-6888f14a0442","version":"1.*","name":"Score Card: NOC","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctopusProject":"$(OctopusProjectId)","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841","EscalationProxy":"3586ecb4-798b-40b8-8779-dff5581856f6","OperationalTestService":"0d19964f-7c47-499c-bf0b-45b24c30ad95"}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":103,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":"agentBasedDeployment","name":"Agent phase (PRG Audit)","refName":null,"workflowTasks":[{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Run audit tool","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Running Audit tool\"\n$LogOutputPath = \"$env:SYSTEM_ARTIFACTSDIRECTORY\\$env:RELEASE_RELEASENAME\"\nif (!(Test-Path $LogOutputPath))\n   {\n   $LogOutputPath = (New-Item -ItemType directory -Path $LogOutputPath)\n   }\n\n$JunctionPrefix = (($env:AGENT_ROOTDIRECTORY).Split(\"\\\")).Get(0) +\"\\A\\\";\nif (!(Test-Path $JunctionPrefix))\n   {\n   New-Item -ItemType directory -Path $JunctionPrefix\n   }\n\n<# ------------------------------------------------------------------\nNow look for installer or package files to scrutinize.\nThe list maintained here is also maintained in ProductAuditPage.js.\nAny change to the include list here needs changed in\nProductAuditPage.js (doesPathSeemToPointToASpecificInstallerFile()) as well.\n--------------------------------------------------------------------- #>\n$scrutinizePath = \"$env:SYSTEM_ARTIFACTSDIRECTORY\\$env:RELEASE_TRIGGERINGARTIFACT_ALIAS\"\nif (!(Test-Path $scrutinizePath))\n   {\n   $scrutinizePath = \"$env:SYSTEM_ARTIFACTSDIRECTORY\\$(ShortCode)\"\n   }\n   \n$fileToScrutinize =     Get-ChildItem -Recurse -Path $scrutinizePath -Include \"*.nupkg\";\nif(-not $fileToScrutinize)\n   {\n   $fileToScrutinize = Get-ChildItem -Recurse -Path $scrutinizePath -Include   \"*.exe\", \"*.msi\", \"*.zip\", \"*.cspkg\";\n   }\n\nforeach ($file in $fileToScrutinize )\n   {\n   try\n      {\n      $theInvocationWithFlags = \"\\\\builds.bentley.com\\PRGBUILDS\\Tools\\AuditTools\\\" + \"ProductDeliveryScrutinizer\\deliveryScrutinizer.exe `-`-Language English `-`-LegalReleaseType `\"Commercial`\" `-`-output `\"$LogOutputPath\" + \"\\ComplianceReport.xml`\" `-`-DeliveryName `\"$(OctopusProjectName)`\"  `\"$file`\" `-`-Strict `-`-PRGProductId $(PRGID) `-`-VersionNumber $(Build.BuildNumber) `-`-JunctionPrefix `\"$JunctionPrefix`\" \"\n\n      Write-Host (\"Command:  \" + $theInvocationWithFlags )\n\n      Invoke-Expression -Command $theInvocationWithFlags\n      }\n   catch\n      {\n      Write-Host \"Audit tool returned an error. $PSItem.Exception.Message\"\n      throw\n      }\n   }\n\ntry\n   {\n   Copy-Item (\"\\\\builds.bentley.com\\PRGBUILDS\\Tools\\AuditTools\\\" + \"ProductDeliveryScrutinizer\\ComplianceReport.html\")   $LogOutputPath\n   Copy-Item (\"\\\\builds.bentley.com\\PRGBUILDS\\Tools\\AuditTools\\\"+ \"ProductDeliveryScrutinizer\\VersionMapTransform.xslt\") $LogOutputPath\n   }\ncatch\n   {\n   Write-Host \"Copy of ComplianceReport.html and VersionMapTransform.xslt failed.\"\n   throw\n   }","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Run Compliance Report converter","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Running Compliance report converter\"\n$LogOutputPath = \"$env:SYSTEM_ARTIFACTSDIRECTORY\\$env:RELEASE_RELEASENAME\"\n$theInvocationWithFlags  = \"\\\\builds.bentley.com\\PRGBUILDS\\Tools\\AuditTools\\\" + \"ComplianceReportConverter\\CRConv.exe -s \" + \"\\\\builds.bentley.com\\PRGBUILDS\\Tools\\AuditTools\\\" + \"ProductDeliveryScrutinizer\\StandardCriteria.xml -c \" + \"$LogOutputPath\" + \"\\ComplianceReport.xml -o \" + \"$LogOutputPath\" + \"\\NUnitComplianceReport.xml\"\n\nWrite-Host (\"Command:  \" + $theInvocationWithFlags )\n\nInvoke-Expression -Command $theInvocationWithFlags","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"0b0f01ed-7dde-43ff-9cbb-e48954daf9b1","version":"2.*","name":"Publish Test Results **\\NUnitComplianceReport.xml","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testRunner":"NUnit","testResultsFiles":"**\\NUnitComplianceReport.xml","searchFolder":"$(System.ArtifactsDirectory)\\$(Release.ReleaseName)","mergeTestResults":"false","failTaskOnFailedTests":"false","testRunTitle":"Score Cards Release Audit","platform":"","configuration":"","publishRunAttachments":"true"}},{"taskId":"5bfb729a-a7c8-4a78-a7c3-8d717bb7c13c","version":"2.*","name":"Copy Files to: \\\\builds.bentley.com\\PRGBUILDS\\RSLogs\\Azure\\$(Build.DefinitionName)\\$(Release.ReleaseName)\\","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SourceFolder":"$(System.ArtifactsDirectory)\\$(Release.ReleaseName)","Contents":"**","TargetFolder":"\\\\builds.bentley.com\\PRGBUILDS\\RSLogs\\Azure\\$(Build.DefinitionName)\\$(Release.ReleaseName)\\","CleanTargetFolder":"true","OverWrite":"false","flattenFolders":"false","preserveTimestamp":"false"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set the ReleaseDescription","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$sReportUrl = \"http://\" + (\"\\\\builds.bentley.com\\PRGBUILDS\\RSLogs\\Azure\\$(Build.DefinitionName)\\$(Release.ReleaseName)\\\").Replace(\"\\\", \"/\").Replace(\"//\",\"\") + \"ComplianceReport.html\"\n\nWrite-Host (\"The Compliance Report is located here: \" + \"\\\\builds.bentley.com\\PRGBUILDS\\RSLogs\\Azure\\$(Build.DefinitionName)\\$(Release.ReleaseName)\\\" +  \"ComplianceReport.html\")\n\nWrite-Host (\"Compliance Report URL: [\" + $sReportUrl + \"](\" + $sReportUrl + \")\")\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"595ca463-b35e-4805-9518-6d037df75447","version":"1.*","name":"Score Card: Release Management","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"After successful deployment of Product Tests (DEV)","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":60,"samplingInterval":5,"stabilizationTime":1,"minimumSuccessDuration":0},"gates":[]}},{"id":524375,"releaseId":47173,"name":"Product Tests (QA)","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":5,"definitionEnvironmentId":3578,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":false,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":false,"name":"QA","conditionType":"environmentState","value":"4"}],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":226,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Set Settings QA environment","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"copy /y $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings_QA.xml $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings.xml","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"2c65196a-54fd-4a02-9be8-d9d1837b7111","version":"1.*","name":"VsTest Platform Installer","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageFeedSelector":"nugetOrg","versionSelector":"latestPreRelease","testPlatformVersion":"","customFeed":"","username":"","password":"","netShare":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set Node proxy variable","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=HTTP_PROXY]http://$(ZapHost):$(ZapPort)\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Remove previous session\nRemove-Item \"C:\\Users\\Administrator\\OWASP ZAP\\session\" -Force -Recurse -ErrorAction Ignore\n\n#Start Zap\n$location = Get-Location\ntry\n{\n    Set-Location \"C:\\Program Files\\OWASP\\Zed Attack Proxy\"\n    Start-Process -FilePath \"C:\\Program Files\\OWASP\\Zed Attack Proxy\\ZAP.exe\" -ArgumentList \"-host localhost -port $(ZapPort) -config api.key=$(ZapKey) -config start.checkforupdates=false -config database.newsession=NewSession -config database.newsessionprompt=false -newsession NewSession\"\n    For($i=0; $i -le 10; $i++)\n    {\n        Try\n        {\n            $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)\" -UseBasicParsing\n        }\n        Catch\n        {\n            Start-Sleep -Seconds 2\n        }\n    }\n    }\nfinally\n{\n    Set-Location \"$location\"\n    Start-Sleep -Seconds 2\n    }\n\n# Exclude urls from Zap proxy\nWrite-Host \"Excluding regex ^((?!(https:\\/\\/{Service url})).*)$\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/excludeFromProxy/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&regex=^((?!(https:\\/\\/{Service url})).*)$\" -UseBasicParsing","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare proxy","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"function Set-Proxy($proxy, $bypassUrls){\n    $proxyBytes = [system.Text.Encoding]::ASCII.GetBytes($proxy)\n    $bypassBytes = [system.Text.Encoding]::ASCII.GetBytes($bypassUrls)\n    $defaultConnectionSettings = [byte[]]@(@(70,0,0,0,06,0,0,0,03,0,0,0,$proxyBytes.Length,0,0,0)+$proxyBytes+@($bypassBytes.Length,0,0,0)+$bypassBytes+ @(1..36 | % {0}))\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path $registryPath -Name ProxyServer -Value $proxy\n    Set-ItemProperty -Path $registryPath -Name ProxyEnable -Value 1\n    Set-ItemProperty -Path \"$registryPath\\Connections\" -Name DefaultConnectionSettings -Value $defaultConnectionSettings\n    netsh winhttp set proxy proxy-server=$proxy bypass-list=$bypassUrls\n}\nSet-Proxy \"http=$(ZapHost):$(ZapPort);https=$(ZapHost):$(ZapPort)\" \"*.blob.core.windows.net\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Command Line Script","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"set NODE_EXTRA_CA_CERTS=C:\\Users\\Administrator\\Desktop\\owasp_zap_root_ca.cer","workingDirectory":"","failOnStderr":"false"}},{"taskId":"f75b2246-f2fc-46a1-b70d-a1e4f98a7468","version":"0.*","name":"Prepare ZAP","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":2,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targeturls":"$(ServiceQaUrl)","basepaths":"none","sessionpath":"$(Agent.TempDirectory)\\OWASP ZAP\\session","zaphost":"$(ZapHost)","zapkey":"$(ZapKey)","zapport":"$(ZapPort)"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"proxy exclusions","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=NO_PROXY].blob.core.windows.net,dev.azure.com,.visualstudio.com\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"ef087383-ee5e-42c7-9a53-ab56c98420f9","version":"2.*","name":"VsTest - testAssemblies","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testSelector":"testAssemblies","testAssemblyVer2":"**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**","testPlan":"","testSuite":"","testConfiguration":"","tcmTestRun":"$(test.RunId)","searchFolder":"$(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\","testFiltercriteria":"","runOnlyImpactedTests":"False","runAllTestsAfterXBuilds":"50","uiTests":"false","vstestLocationMethod":"version","vsTestVersion":"toolsInstaller","vstestLocation":"","runSettingsFile":"","overrideTestrunParameters":"","pathtoCustomTestAdapters":"","runInParallel":"False","runTestsInIsolation":"False","codeCoverageEnabled":"False","otherConsoleOptions":"","distributionBatchType":"basedOnTestCases","batchingBasedOnAgentsOption":"autoBatchSize","customBatchSizeValue":"10","batchingBasedOnExecutionTimeOption":"autoBatchSize","customRunTimePerBatchValue":"60","dontDistribute":"False","testRunTitle":"","platform":"","configuration":"","publishRunAttachments":"true","failOnMinTestsNotRun":"False","minimumExpectedTests":"1","diagnosticsEnabled":"True","collectDumpOn":"onAbortOnly","rerunFailedTests":"False","rerunType":"basedOnTestFailurePercentage","rerunFailedThreshold":"30","rerunFailedTestCasesMaxLimit":"5","rerunMaxAttempts":"3"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Get failed tests count","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$token = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\":\" + $env:SYSTEM_ACCESSTOKEN))\n$headers = @{\n    \"Authorization\" = \"Basic $token\";\n    \"Content-Type\" = \"application/json\";\n}\n\n$releaseId = $(Release.ReleaseId)\n$releaseEnv = $(Release.EnvironmentId)\n$url = \"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/ResultSummaryByRelease?releaseId=$releaseId&releaseEnvId=$releaseEnv&includeFailureDetails=true\"\ntry {\n    $response = Invoke-WebRequest $url -headers $headers -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host \"Failed to get test results from this URL: $url. Make sure scripts are alowed to use OAuth token\"\n    throw $_\n}\n$content = ConvertFrom-Json $response.content\n\n$failedTestsCount = [int]$content.aggregatedResultsAnalysis.resultsByOutcome.Failed.Count\n$totalTestsCount = [int]$content.aggregatedResultsAnalysis.totalTests\n$notExecutedTestsCount = [int]$content.aggregatedResultsAnalysis.NotExecuted.Failed.Count\ntry {\n    $failedTestsThreshold = [int]\"0\"\n} catch {\n    Write-Host 'Missing FailedTestsThreshold variable, setting it to 0'\n    $failedTestsThreshold = 0\n}\n\nif($totalTestsCount -gt 0) {\n    Write-Host \"Failed tests count: $failedTestsCount\"\n    if(($failedTestsThreshold * 0.01) -ge ($failedTestsCount / ($totalTestsCount - $notExecutedTestsCount)))\n    {\n        Write-Host \"Enough tests passed for the passive scan\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n    }\n    else\n    {\n        Write-Host \"##vso[task.logissue type=warning;] More than 0% of tests failed. Failed test threshold was exceeded.\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    }\n} else {\n    Write-Host \"No tests were run or the results were not uploaded\";\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Check if requests were recorded","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$requests = Invoke-RestMethod \"http://$(ZapHost):$(ZapPort)/JSON/core/view/urls/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&baseurl=https://{Service url}\" -UseBasicParsing\nif($requests.urls.length -eq 0){\n    Write-Host \"##vso[task.logissue type=warning;] No requests to target URL recorded\"\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    throw $_\n} else {\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"b0a9eaf4-02f3-4dd3-a054-e29f5cdd0560","version":"0.*","name":"Check ZAP requests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{}},{"taskId":"0f07780f-f4c8-488d-bf43-d854a7b7c9cb","version":"0.*","name":"ZAP passive scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"scantimeout":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Generate Zap Report","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/OTHER/core/other/jsonreport/?apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$response.content > \"$(System.DefaultWorkingDirectory)\\ZapPassive.json\"\nWrite-Host \"Report generated to $(System.DefaultWorkingDirectory)\\ZapPassive.json\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Cleanup Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Cleaning Zap\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/view/rules/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$content = $response.content\n$contentObject = $content | ConvertFrom-Json\n$rules = $contentObject.rules\nforeach($rule in $rules)\n{\n    # remove rules\n    $ruleDescription = $rule.description\n    Write-Host \"Removing Replacer rule with name $ruleDescription \"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/action/removeRule/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&description=$ruleDescription\" -UseBasicParsing\n    Write-Host \"Successfully removed rule $ruleDescription\"\n}\nWrite-Host \"Finished cleaning Zap\"","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Shutdown Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"try\n{\n    Write-Host \"Shutting down Zap\"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/shutdown/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n    Write-Host \"Zap was shutdown\"\n    }\ncatch {\n    Write-Host \"Error occured while shutting down Zap\"\n    Write-Error $_.Exception.Message\n    }\n\n# Remove proxy settings\ntry\n{\n    Write-Host \"Removing proxy\"\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path \"$registryPath\" -Name \"ProxyEnable\" -Value 0 -Type Dword\n    Clear-ItemProperty -Path \"$registryPath\" -Name \"ProxyOverride\"\n    $signature = @'\n    [DllImport(\"wininet.dll\", SetLastError = true, CharSet=CharSet.Auto)]\npublic static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);\n'@\n    $INTERNET_OPTION_SETTINGS_CHANGED = 39\n    $INTERNET_OPTION_REFRESH = 37\n    $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru\n    $type::InternetSetOption(0, $INTERNET_OPTION_SETTINGS_CHANGED, 0, 0) | Out-Null\n    $type::InternetSetOption(0, $INTERNET_OPTION_REFRESH, 0, 0) | Out-Null\n    }\ncatch {\n    Write-Host \"Error occured while removing proxy\"\n    Write-Error $_.Exception.Message\n}\ntry {\n    write-host 'Removing WinHTTP proxy';\n    netsh winhttp reset proxy;\n} catch {\n    Write-host 'Failed to remove WinHTTP proxy';\n}\nWrite-Host \"##vso[task.setvariable variable=Get-Date;]$(ShortCode)_$($(Get-Date).ToString(\"yyyy.MM.dd\"))\";","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Send Zap Report to AppSec","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Upload report to AppSec\nWrite-Host \"Reding content from report.\"\n$content = [IO.File]::ReadAllText(\"$(System.DefaultWorkingDirectory)\\ZapPassive.json\")\nWrite-Host \"Read content successfully\"\nif($(System.TotalJobsInPhase) -gt 1)\n{\n    Write-Host \"Multiple jobs in phase were found. Appending $(System.JobPositionInPhase) to report name.\"\n    $reportName = \"ZapPassive_$(System.JobPositionInPhase).json\"\n} else \n{\n    Write-Host \"Single job in phase was found.\"\n    $reportName = \"ZapPassive.json\"\n}\n# VstsReleaseName is a name of a folder to which Scan will be uploaded to\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"$reportName\"\n    \"ReportContent\"=\"$content\"\n}\nWrite-Host \"GprId: $(ProductID)\"\nWrite-Host \"PssFolderName: $(ShortCode)_$(Build.BuildNumber)\"\nWrite-Host \"Report file name: $reportName\"\n$bodyContentJson = $bodyContent | ConvertTo-Json\n$retries = 0\nDO\n{\n    try\n    {\n        $response = Invoke-WebRequest -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json' -UseBasicParsing\n    }\n    catch\n    {\n        Write-Host $_.Exception.Message\n    }\n    $retries++\n}\nWhile (($response.StatusCode -ne 200) -and ($retries -lt 10))\nif($retries -eq 10)\n{\n    Write-Error \"Failed to upload to AppSec\"\n    throw $_\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"NMap scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$out = nmap -sS -sV -T3 -Pn -O -v --reason --open -p 1-65535 --privileged -oX - $targetStrippedUrl\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Nmap.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Sslyze scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$targetPort = $uri.Port\n$targetUrlWithPort = \"${targetStrippedUrl}:$targetPort\"\n$out = sslyze --regular --xml_out=- $targetUrlWithPort\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Sslyze.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Waiting for ZAP to shut down","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Waiting for ZAP to shut down';\n$stillWait = $true;\nWhile ($stillWait) {\n    $pro = Get-Process javaw -ErrorAction Ignore;\n    if (!$pro) {\n        Write-Host 'ZAP exited';\n        $stillWait = $false;\n        break;\n    }\n    Write-Host 'Still waiting';\n    start-sleep 5;\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":"runOnServer","name":"Agentless phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Manual Selenium Test Compliance Approval","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"The $(Release.DefinitionName) for $(Build.DefinitionName), $(Build.BuildNumber) QA Tests have been completed.\nIf the test run has failed and manual compliance exists, please provide the compliance link in the Manual Intervention Comment on VSTS and approve or reject as applicable:\n\n1. Selenium Test Compliance Report Link: \n\nReports stated must meet the release requirements for this deployment.\nhttps://bentley.sharepoint.com/sites/ReleaseServices/DevOpsToolGuide/VSTSDeploymentGuide.aspx","emailRecipients":"","onTimeout":"reject"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"After successful deployment of QA","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]}},{"id":524376,"releaseId":47173,"name":"Scorecard (QA)","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":6,"definitionEnvironmentId":3579,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":false,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":false,"name":"Product Tests (QA)","conditionType":"environmentState","value":"4"}],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":171,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase (Score Card validations)","refName":null,"workflowTasks":[{"taskId":"7adcd483-65f8-4eb5-882f-998ec8e1e9bc","version":"3.*","name":"Score Card: Development","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SwaggerUrl":"$(ServiceQaUrl)","SiteUrl":"$(ServiceQaUrl)","ProductName":"","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"cfe7e6d3-72d7-4019-ae74-b5ee364368ea","version":"2.*","name":"Score Card: Test Automation","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SwaggerUrl":"$(ServiceQaUrl)","SwaggerUrlProd":"$(ServiceProdUrl)","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"3953d1e5-4721-497b-a164-04678d0df621","version":"2.*","name":"Score Card: Bentley Connect Services Management","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctopusProject":"$(OctopusProjectId)","OctopusEnvironment":"","OctopusService":"3df7f17b-e95f-4ada-8617-24e3a1888afb","AppInsightsService":"0d19964f-7c47-499c-bf0b-45b24c30ad95","SeqService":"874ee479-6e53-465f-b5a7-92946dcd0493","SeqEnvironment":"","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841","ScorecardReports":"615c9089-5db3-437a-aa9a-882128acde9a","GrafanaService":"76a5caa5-4d28-46ec-8b2c-d5bf49621cb7"}},{"taskId":"b17573a4-5226-43a6-a556-62c203be936a","version":"2.*","name":"Score Card: Quality Assurance","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"0273cb44-733f-4250-8e93-141886e6d4db","version":"3.*","name":"Score Card: Security","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SecurityMicrosoftFlowService":"9ff0028f-a2b6-4bf0-bd17-a6a51678f619","SecuritySignOffApiService":"d10ac660-2333-46df-833f-d733990ab303","SecuritySignOffApiServiceInstance":"c445cedf-15e3-41d4-9b19-3a0f7bfc1163","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"c479bbf0-f07d-47c0-b4d2-73cad353313b","version":"1.*","name":"Score Card: Product Management","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SiteUrl":"$(ServiceQaUrl)","LoginData":"90a232dc-a05b-4d6d-aa0e-fddfbd57f1b8","SeqService":"874ee479-6e53-465f-b5a7-92946dcd0493","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"fe69ebf0-c7bf-4d36-9f73-6888f14a0442","version":"1.*","name":"Score Card: NOC","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctopusProject":"$(OctopusProjectId)","ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841","EscalationProxy":"3586ecb4-798b-40b8-8779-dff5581856f6","OperationalTestService":"0d19964f-7c47-499c-bf0b-45b24c30ad95"}},{"taskId":"510ce7d4-6dbd-4a39-9c87-29331fb58db1","version":"0.*","name":"Score Card: Performance","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"ScorecardService":"ac726afa-9c34-49af-973a-0e7b2d808841"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"After successful deployment of Product Tests (QA)","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":12425,"gatesOptions":{"isEnabled":true,"timeout":60,"samplingInterval":5,"stabilizationTime":1,"minimumSuccessDuration":0},"gates":[{"tasks":[{"environment":{},"taskId":"81e0abec-589e-4a5e-8970-17897f83e218","version":"1.*","name":"Scorecard Gate","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"connectedServiceName":"ac726afa-9c34-49af-973a-0e7b2d808841"}}]}]}},{"id":524377,"releaseId":47173,"name":"Release Coordination (Temp)","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":10080,"executionOrder":"afterSuccessfulGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[TEAM FOUNDATION]\\Release Services","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/61843733-6261-432c-a5e8-583c65ab3810","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aadgp.Uy0xLTktMTU1MTM3NDI0NS0xMjA0NDAwOTY5LTI0MDI5ODY0MTMtMjE3OTQwODYxNi0zLTM3OTAyMzAxMDktNjA4ODk4NjM5LTI0NTkwMzIyODYtOTc2OTk1MzYy"}},"id":"61843733-6261-432c-a5e8-583c65ab3810","uniqueName":"vstfs:///Framework/IdentityDomain/02a1a041-e8f4-4527-95e1-6fc0d2b4481e\\Release Services","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aadgp.Uy0xLTktMTU1MTM3NDI0NS0xMjA0NDAwOTY5LTI0MDI5ODY0MTMtMjE3OTQwODYxNi0zLTM3OTAyMzAxMDktNjA4ODk4NjM5LTI0NTkwMzIyODYtOTc2OTk1MzYy","isContainer":true,"descriptor":"aadgp.Uy0xLTktMTU1MTM3NDI0NS0xMjA0NDAwOTY5LTI0MDI5ODY0MTMtMjE3OTQwODYxNi0zLTM3OTAyMzAxMDktNjA4ODk4NjM5LTI0NTkwMzIyODYtOTc2OTk1MzYy"},"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":43200,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":7,"definitionEnvironmentId":3580,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":false,"name":"Scorecard (QA)","conditionType":"environmentState","value":"4"}],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":103,"demands":["Agent.OS -equals Windows_NT"],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"CRC Request Phase","refName":null,"workflowTasks":[{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Add CRC Review entry","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$VerbosePreference = 'Continue'\n\n$PRDTargetDate = [datetime]::Today.ToString('yyyy-MM-dd')\n$DeploymentItems = \"$(DeploymentItems)\"\n$Comments = \"Request Notes:\" + \"$(Release.ReleaseDescription)\"\n$ReleasePackageName = \"$(ReleasePackageName)\" \n$ReleaseType = \"$(ReleaseType)\"\n$ShortCode = \"$(ShortCode)\"\n$AuditReport = \"\\\\builds.bentley.com\\prgbuilds\\RSLogs\\Azure\\\" + \"$env:BUILD_DEFINITIONNAME\" + \"\\\" + \"$env:RELEASE_RELEASENAME\" + \"\\ComplianceReport.html\"\n        \nif(!$Comments)\n    {\n    Throw \"Please make sure that the Release Description is not empty.\"\n    }\nelseif(!$ReleaseType)\n    {\n    Throw \"Please make sure you have set the 'ReleaseType' variable for this release.\"\n    }\nelseif(!$ShortCode)\n    {\n    Throw \"Please make sure you have set the 'ShortCode' variable for this release.\"\n    }\nelseif(!$ReleasePackageName)\n    {\n    Throw \"Please make sure you have set the 'ReleasePackageName' variable for this release.\"\n    }\nelse\n    {\n    $BuildNumber = \"$(ShortCode)\" + \"_\" + \"$env:BUILD_BUILDNUMBER\"\n\n    try \n        {\n        $JSON = @{\n            BuildNumber = $BuildNumber\n            PRDTargetDate = $PRDTargetDate\n            DeploymentItems = $DeploymentItems\n            Comments = $Comments\n            ReleasePackageName = $ReleasePackageName\n            ReleaseType = $ReleaseType\n            AuditReport = $AuditReport\n        } | ConvertTo-Json\n\n        write-Host $JSON\n        \n        $response = Invoke-WebRequest -Uri http://tools.bentley.com/crcupdateservice/AddCRCReview -Method POST -Body $JSON -ContentType \"application/json; charset=utf-8\" -UseDefaultCredentials\n        }\n    catch\n        { \n        Write-Host -BackgroundColor:Black -ForegroundColor:Red $_.Exception\n        $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd() | ConvertFrom-Json\n        Write-Host -BackgroundColor:Black -ForegroundColor:Red $responseBody.message\n\n        If($response.statuscode)\n            {\n            Write-Host -BackgroundColor:Black -ForegroundColor:Green \"The server returned : \" $response.statuscode\n            Write-Host -BackgroundColor:Black -ForegroundColor:Green $response.content\n            }\n            \n        exit 1\n        }\n\n    If($response.statuscode)\n        {\n        Write-Host -BackgroundColor:Black -ForegroundColor:Green \"The server returned : \" $response.statuscode\n        Write-Host -BackgroundColor:Black -ForegroundColor:Green $response.content\n        }\n    }","errorActionPreference":"stop","failOnStderr":"true","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Update CRC Review Entry","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$VerbosePreference = 'Continue'\n\n$CRNumber = \"VSTSPipeline\"\n$PRDPushRisk = \"VSTS Release - \" + \"$(Release.ReleaseWebUrl)\"\n        \nif(!$CRNumber)\n    {\n    Throw \"Please make sure that the CR number is not empty.\"\n    }\nelseif(!$PRDPushRisk)\n    {\n    Throw \"Please make sure you have set the 'ReleaseWebUrl' variable for this release.\"\n    }\nelse\n    {\n    $BuildNumber = \"$(ShortCode)\" + \"_\" + \"$env:BUILD_BUILDNUMBER\"\n    $uri = \"http://tools.bentley.com/crcupdateservice/UpdateCRCReview/\" + $BuildNumber\n    try \n        {\n        $JSON = @{\n            CRNumber = $CRNumber\n            PRDPushRisk = $PRDPushRisk\n        } | ConvertTo-Json\n\n        write-Host $JSON\n        \n        $response = Invoke-WebRequest -Uri $uri -Method PATCH -Body $JSON -ContentType \"application/json; charset=utf-8\" -UseDefaultCredentials\n        }\n    catch\n        { \n        Write-Host -BackgroundColor:Black -ForegroundColor:Red $_.Exception\n        $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd() | ConvertFrom-Json\n        Write-Host -BackgroundColor:Black -ForegroundColor:Red $responseBody.message\n        \n        If($response.statuscode)\n            {\n            Write-Host -BackgroundColor:Black -ForegroundColor:Green \"The server returned : \" $response.statuscode\n            Write-Host -BackgroundColor:Black -ForegroundColor:Green $response.content\n            }\n            \n        exit 1\n        }\n\n    If($response.statuscode)\n        {\n        Write-Host -BackgroundColor:Black -ForegroundColor:Green \"The server returned : \" $response.statuscode\n        Write-Host -BackgroundColor:Black -ForegroundColor:Green $response.content\n        }\n    }","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Print BCSM GPR Deliverable Data","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$VerbosePreference = 'Continue'\n\n$Architecture = \"x64\" \n$BuildQuality = \"Create\"\n$BuildType = \"Installer\"\n$DeliverableType = \"AzureDevOps\"\n$Description = \"$(Release.ReleaseDescription)\"\n$Generation = \"CONNECT Edition\"\n###Language\n  $AvailabilityRegion = \"United States\"\n  $Language = \"English\"\n###Location\n  $LocationType = \"CONNECT\"\n  $LocationServer = \"https://octopus.bentley.com/\"\n  $LocationRelativePath = \"app#/releases/releases\" + [guid]::NewGuid() \n  $PackageSize = 0\n$Name = \"$(OctopusProjectName)\"\n$ReleaseDate = [datetime]::Today.ToString('yyyy-MM-dd')\n$ReleaseType = \"Internal/Bentley Development\"    #\"$(ReleaseType)\"\n$GPRReleaseType = switch ($ReleaseType)\n{\n\"Technology Preview/Limited Access\" {\"Beta\"}\n\"Technology Preview/Early Access\" {\"Beta\"}\n\"General Availability/Priority Access\" {\"Commercial\"}\n\"Internal/Bentley Colleagues\" {\"Internal\"}\n\"Internal/Bentley Development\" {\"Internal\"}\n}\n$OperatingSystem = \"Azure\"\n$ProductIds = \"[\" + \"$(ProductID)\" + \"]\"\n$Version = \"$(Build.BuildNumber)\"\n$DependentPackageId = \"0\"\n$IsDependentBuild = \"false\"\n\n  \n$JSON = @\"\n{\"Architecture\": \"$Architecture\",\n\"BuildQuality\": \"$BuildQuality\",\n\"BuildType\": \"$BuildType\",\n\"DeliverableType\": \"$DeliverableType\",\n\"DependentPackageId\": 0,\n\"Description\": \"$Description\",\n\"Generation\": \"$Generation\",\n\"IsDependentBuild\": false,\n\"LanguageRegions\": [{\"AvailabilityRegion\": \"$AvailabilityRegion\",\n\"Language\": \"$Language\"}],\n\"Locations\": [{\"LocationRelativePath\": \"$LocationRelativePath\",\n\"LocationServer\": \"$LocationServer\",\n\"LocationType\": \"$LocationType\",\n\"Size\": $PackageSize}],\n\"Name\": \"$Name\",\n\"OperatingSystem\": \"$OperatingSystem\",\n\"ProductIds\": $ProductIds,\n\"ReleaseDate\": \"$ReleaseDate\",\n\"ReleaseType\": \"$GPRReleaseType\",\n\"Version\": \"$Version\"}\n\"@\n\nWrite-Host -BackgroundColor:Black -ForegroundColor:Gray \"JSON Output... \" $JSON\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"BCSM-Print last successful release's Release Type","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$VerbosePreference = 'Continue'\n\n#Connect to AzureDevOps Web Api\n$username = \"\"\n$PAT = \"$(PAT)\" #This personal access token is the one of BCSM automation service principal\n$Headers = @{ Authorization = \"Basic {0}\" -f [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$PAT))) }\n\ntry \n{   \nWrite-Host -ForegroundColor:Green \"---------- Getting list of releases for current Release pipeline... ----------\"\n$apiURL = \"https://vsrm.dev.azure.com/bentleycs/beconnect/_apis/release/releases?definitionId=$(Release.DefinitionId)\"\n$allReleases = Invoke-WebRequest -Uri $apiURL -Method GET -Headers $Headers -UseBasicParsing\n$allReleasesObject = (ConvertFrom-Json ($allReleases.Content))\n\nif($allReleasesObject.count -le 1){\n\tWrite-Host -ForegroundColor:Red \"!!! No previous releases were found !!!\"\n\texit 0\n\t}\n\t\nforeach ($id in ($allReleasesObject.value.id  | select -skip 1)) {\n\tWrite-Host -ForegroundColor:Green \"---------- Getting Current Release object in foreach loop... ----------\"\n\t$apiURL = \"https://vsrm.dev.azure.com/bentleycs/beconnect/_apis/release/releases/\" + $id + \"?api-version=5.1\"\n\t$release = Invoke-WebRequest -Uri $apiURL -Method GET -Headers $Headers -UseBasicParsing\n\t$releaseObject = (ConvertFrom-Json ($release.Content))\n\t\n\tWrite-Host -ForegroundColor:Green \"---------- Checking if there was a successful PRD stage for current Release object... ----------\"\n\t#if($releaseObject.environments | Where-Object {$_.name -eq \"GPR Posting\" -and $_.status -eq \"succeeded\"}){\n\tif($releaseObject.environments | Where-Object {$_.name -eq \"PRD\" -and $_.status -eq \"succeeded\"}){\n\t\t$version = $releaseObject.artifacts.definitionReference.version.name\n\t\t$name = $releaseObject.releaseDefinition.name\n\t\t\n\t\tWrite-Host -ForegroundColor:Green \"---------- Getting the Release Type for current Release object that has a successful PRD stage... ----------\"\n\t\t$releaseType = $releaseObject.variables.ReleaseType.value\n\t\tif($releaseType){\n\t\t\tWrite-Host -ForegroundColor:Green \"!!! The previous Release Type for '$name', version '$version' was '$ReleaseType' !!!\"\n            Write-Host -ForegroundColor:Green \"!!! The current Release Type is set to '$(ReleaseType)' !!!\"\n\t\t\texit 0\n\t\t}\n\t}\n}\nWrite-Host -ForegroundColor:Red \"!!! No previous releases with a successful PRD stage were found !!!\"\nexit 0\n}\ncatch [System.Net.WebException] \n{\nWrite-Host -ForegroundColor:Red \"!!! There was a problem trying to get the last successful PRD release's Release Type !!!\"\n\n$statusCode = [int]$_.Exception.Response.StatusCode\n$html = $_.Exception.Response.StatusDescription\nWrite-Host \"Status code : \" $statusCode\nWrite-Host \"The server returned : \" $html\n$PSItem.InvocationInfo | Format-List *\n\nexit 1\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}}]}],"owner":{"displayName":"[beconnect]\\BCSM Release (was RS)","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/164741fe-b57e-4068-a99d-edcbbdc74ccc","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5"}},"id":"164741fe-b57e-4068-a99d-edcbbdc74ccc","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\BCSM Release (was RS)","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"After successful deployment of Scorecard (QA)","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]}},{"id":524378,"releaseId":47173,"name":"PRD","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"id":0},{"rank":2,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[beconnect]\\BCSM","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/cd725718-6371-4b7e-bfa5-3666dccbcda3","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMjg0NzI0MzMwMC0xNjEwMjE0NDc1LTMwMTE2NTkzNzUtMjQzMzA0Mzk3"}},"id":"cd725718-6371-4b7e-bfa5-3666dccbcda3","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\BCSM","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMjg0NzI0MzMwMC0xNjEwMjE0NDc1LTMwMTE2NTkzNzUtMjQzMzA0Mzk3","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMjg0NzI0MzMwMC0xNjEwMjE0NDc1LTMwMTE2NTkzNzUtMjQzMzA0Mzk3"},"id":0}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[beconnect]\\BCSM","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/cd725718-6371-4b7e-bfa5-3666dccbcda3","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMjg0NzI0MzMwMC0xNjEwMjE0NDc1LTMwMTE2NTkzNzUtMjQzMzA0Mzk3"}},"id":"cd725718-6371-4b7e-bfa5-3666dccbcda3","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\BCSM","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMjg0NzI0MzMwMC0xNjEwMjE0NDc1LTMwMTE2NTkzNzUtMjQzMzA0Mzk3","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMjg0NzI0MzMwMC0xNjEwMjE0NDc1LTMwMTE2NTkzNzUtMjQzMzA0Mzk3"},"id":0},{"rank":2,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[beconnect]\\BCSM Release (was RS)","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/164741fe-b57e-4068-a99d-edcbbdc74ccc","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5"}},"id":"164741fe-b57e-4068-a99d-edcbbdc74ccc","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\BCSM Release (was RS)","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5"},"id":0}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":8,"definitionEnvironmentId":3581,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"result":false,"name":"Release Coordination (Temp)","conditionType":"environmentState","value":"4"}],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":242,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"taskId":"8ca1d96a-151d-44b7-bc4f-9251e2ea6971","version":"4.*","name":"Deploy Octopus Release","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctoConnectedServiceName":"3df7f17b-e95f-4ada-8617-24e3a1888afb","Space":"Spaces-1","Project":"$(OctopusProjectName)","ReleaseNumber":"$(Build.BuildNumber)","Environments":"Production","ShowProgress":"true","DeployForTenants":"","DeployForTenantTags":"","AdditionalArguments":"--deploymenttimeout=05:00:00"}},{"taskId":"d96e8c90-0fdd-11e8-a8b1-79ecfcf1be7c","version":"2.*","name":"Retain indefinitely current release","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"lock":"true"}},{"taskId":"6bd666d3-e8d0-4f33-9628-638785413144","version":"0.*","name":"Scorecard set version released","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"connectedServiceName":"ac726afa-9c34-49af-973a-0e7b2d808841"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"BCSM-Insert GPR Deliverable","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$VerbosePreference = 'Continue'\n\n$username = \"$(username_GPRAPI)\"\n$password = \"$(password_GPRAPI)\"\n$Headers = @{ Authorization = \"Basic {0}\" -f [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) }\n\n$Architecture = \"x64\" \n$BuildQuality = \"Released\"\n$BuildType = \"Installer\"\n$DeliverableType = \"AzureDevOps\"\n$Description = \"$(Release.ReleaseDescription)\"\nif(!$Description){\n     $Description = \"$(OctopusProjectName)\"\n}\n$Generation = \"CONNECT Edition\"\n###Language\n  $AvailabilityRegion = \"United States\"\n  $Language = \"English\"\n###Location\n  $LocationType = \"CONNECT\"\n  $LocationServer = \"https://octopus.bentley.com/\"\n  $LocationRelativePath = \"app#/releases/releases\" + [guid]::NewGuid() \n  $PackageSize = 0\n$Name = \"$(OctopusProjectName)\"\n$ReleaseDate = [datetime]::Today.ToString('yyyy-MM-dd')\n$ReleaseType = \"$(ReleaseType)\"\n$GPRReleaseType = switch ($ReleaseType)\n{\n\"Technology Preview/Limited Access\" {\"Beta\"}\n\"Technology Preview/Early Access\" {\"Beta\"}\n\"General Availability/General Access\" {\"Commercial\"}\n\"Internal/Bentley Colleagues\" {\"Internal\"}\n\"Internal/Bentley Development\" {\"Internal\"}\n}\n$OperatingSystem = \"Azure\"\n$ProductIds = \"[\" + \"$(ProductID)\" + \"]\"\n$Version = \"$(Build.BuildNumber)\"\n$DependentPackageId = \"0\"\n$IsDependentBuild = \"false\"\n\n##Verification, no empty values\nif(!$Architecture){Throw \"Architecture cannot be NULL.\"}\nif (!$BuildQuality){Throw \"Build Quality cannot be NULL.\"}\nif(!$BuildType){Throw \"Build Type cannot be NULL.\"}\nif(!$DeliverableType){Throw \"Deliverable Type cannot be NULL.\"}\nif(!$Description){Throw \"Description cannot be NULL.\"}\nif(!$Generation){Throw \"Generation string cannot be NULL.\"}\nif(!$AvailabilityRegion){Throw \"Availability Region cannot be NULL.\"}\nif(!$Language){Throw \"Language cannot be NULL.\"}\nif(!$LocationRelativePath){Throw \"Location Relative Path cannot be NULL.\"}\nif(!$LocationServer){Throw \"Location Server cannot be NULL.\"}\nif(!$LocationType){Throw \"LocationType cannot be NULL.\"}\nif ( $PackageSize -eq $null ) { Throw \"Size cannot be NULL.\" }\nif(!$Name){Throw \"Name cannot be NULL.\"}\nif(!$OperatingSystem){Throw \"Operating System cannot be NULL.\"}\nif(!$ReleaseDate){Throw \"ReleaseDate cannot be NULL.\"}\nif(!$GPRReleaseType){Throw \"GPR ReleaseType cannot be NULL.\"}\nif(!$ProductIds){Throw \"ProductIds cannot be NULL.\"}\nif(!$Version){Throw \"Version Number cannot be NULL.\"}\nif(!$DependentPackageId){Throw \"DependentPackageId cannot be NULL.\"}\nif(!$IsDependentBuild){Throw \"IsDependentBuild cannot be NULL.\"}\n\ntry \n{   \n$JSON = @\"\n{\"Architecture\": \"$Architecture\",\n\"BuildQuality\": \"$BuildQuality\",\n\"BuildType\": \"$BuildType\",\n\"DeliverableType\": \"$DeliverableType\",\n\"DependentPackageId\": 0,\n\"Description\": \"$Description\",\n\"Generation\": \"$Generation\",\n\"IsDependentBuild\": false,\n\"LanguageRegions\": [{\"AvailabilityRegion\": \"$AvailabilityRegion\",\n\"Language\": \"$Language\"}],\n\"Locations\": [{\"LocationRelativePath\": \"$LocationRelativePath\",\n\"LocationServer\": \"$LocationServer\",\n\"LocationType\": \"$LocationType\",\n\"Size\": $PackageSize}],\n\"Name\": \"$Name\",\n\"OperatingSystem\": \"$OperatingSystem\",\n\"ProductIds\": $ProductIds,\n\"ReleaseDate\": \"$ReleaseDate\",\n\"ReleaseType\": \"$GPRReleaseType\",\n\"Version\": \"$Version\"}\n\"@\n\n$JSON\n\n###Call GPR Web API\n$response = Invoke-WebRequest -Uri https://tools.bentley.com/GprService/api/v1/Build -Method POST -Body $JSON -ContentType \"application/json\" -Headers $Headers -UseBasicParsing -ErrorVariable RespErr\n\n$response\n$response.Content\n}\ncatch [System.Net.WebException] \n{\n$statusCode = [int]$_.Exception.Response.StatusCode\n$html = $_.Exception.Response.StatusDescription\nWrite-Host -BackgroundColor:Black -ForegroundColor:Gray \"Status code : \" $statusCode\nWrite-Host -BackgroundColor:Black -ForegroundColor:Gray \"The server returned : \" $html\n$PSItem\n$PSItem.ScriptStackTrace\n$PSItem.InvocationInfo | Format-List *\n\nexit 1\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Update GPR deliverable","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$VerbosePreference = 'Continue'\n\n$username = \"$(username_GPRAPI)\"\n$password = \"$(password_GPRAPI)\"\n$Headers = @{ Authorization = \"Basic {0}\" -f [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\"{0}:{1}\" -f $username,$password))) }\n\ntry \n{   \n$Name = [uri]::EscapeDataString(\"$(OctopusProjectName)\")\n$Version = \"$(Build.BuildNumber)\"\n$VersionForAPI = $Version.replace('.','_')\nif(!$Name){Throw \"Name cannot be NULL.\"}\nelseif(!$VersionForAPI){Throw \"Version cannot be NULL.\"}\nelse\n{\n$apiURL = \"https://tools.bentley.com/GprService/api/v1/GetBuilds(Name='$Name',Version='$VersionForAPI')\"\n$response = Invoke-WebRequest -Uri $apiURL -Method GET -Headers $Headers -UseBasicParsing\n\n$responseObject = (ConvertFrom-Json ($response.Content))\n$BuildId = $responseObject.BuildId[0]\nWrite-Host \"The Build Id associated with \" $Name \", version \" $Version \" is : \"  $BuildId\n\nWrite-Host -ForegroundColor:Green \"Status code : \" $response.statuscode\nWrite-Host -ForegroundColor:Green \"The server returned : \" $response.content\n}\n}\ncatch [System.Net.WebException] \n{\n$statusCode = [int]$_.Exception.Response.StatusCode\n$html = $_.Exception.Response.StatusDescription\nWrite-Host \"Status code : \" $statusCode\nWrite-Host \"The server returned : \" $html\n$PSItem.InvocationInfo | Format-List *\n\nexit 1\n}\n\nif( (200 -ne $response.statuscode) -or [string]::IsNullOrEmpty($BuildId) )\n    {\n    Write-Host \"The status code (\"$response.statuscode\") wasn't 200 or the BuildId (\"$BuildId\") was null or empty!\"\n    exit 1\n    }\n\n$ReleaseType = \"$(ReleaseType)\"\n$GPRReleaseType = switch ($ReleaseType)\n{\n\"Technology Preview/Limited Access\" {\"Beta\"}\n\"Technology Preview/Early Access\" {\"Beta\"}\n\"General Availability/Priority Access\" {\"Commercial\"}\n\"Internal/Bentley Colleagues\" {\"Internal\"}\n\"Internal/Bentley Development\" {\"Internal\"}\n}\n\n\ntry \n{   \n$JSON = @\"\n{\"BuildId\": \"$BuildId\",\n\"ReleaseType\": \"$GPRReleaseType\"}\n\"@\n\n$JSON\n\n$response = Invoke-WebRequest -Uri https://tools.bentley.com/GprService/api/v1/BuildUpdate -Method PUT -Body $JSON -ContentType \"application/json\" -Headers $Headers -UseBasicParsing -ErrorVariable RespErr\n\n$response\n$response.Content\n}\ncatch [System.Net.WebException] \n{\n$statusCode = [int]$_.Exception.Response.StatusCode\n$html = $_.Exception.Response.StatusDescription\nWrite-Host \"Status code : \" $statusCode\nWrite-Host \"The server returned : \" $html\n$PSItem\n$PSItem.InvocationInfo | Format-List *\n\nexit 1\n}\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}}]}],"owner":{"displayName":"[beconnect]\\BCSM Release (was RS)","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/164741fe-b57e-4068-a99d-edcbbdc74ccc","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5"}},"id":"164741fe-b57e-4068-a99d-edcbbdc74ccc","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\BCSM Release (was RS)","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMTg1NTQ5MzQyNi0yNjI2NzExODEtMjQ5ODgyOTUwOC0zNjI0MjgwMTk5"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"After successful deployment of Release Coordination (Temp)","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]}},{"id":524379,"releaseId":47173,"name":"PERF","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":9,"definitionEnvironmentId":3582,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":242,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"taskId":"8ca1d96a-151d-44b7-bc4f-9251e2ea6971","version":"4.*","name":"Deploy Octopus Release","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"OctoConnectedServiceName":"3df7f17b-e95f-4ada-8617-24e3a1888afb","Space":"Spaces-1","Project":"$(OctopusProjectName)","ReleaseNumber":"$(Build.BuildNumber)","Environments":"Performance Testing","ShowProgress":"true","DeployForTenants":"","DeployForTenantTags":"","AdditionalArguments":"--deploymenttimeout=02:00:00"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"Manual","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":{"isEnabled":false,"timeout":1440,"samplingInterval":15,"stabilizationTime":15,"minimumSuccessDuration":0},"gates":[]}},{"id":524380,"releaseId":47173,"name":"Active scan","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":10,"definitionEnvironmentId":3583,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":226,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Set Settings QA environment","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"copy /y $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings_QA.xml $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings.xml","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"2c65196a-54fd-4a02-9be8-d9d1837b7111","version":"1.*","name":"VsTest Platform Installer","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageFeedSelector":"nugetOrg","versionSelector":"latestPreRelease","testPlatformVersion":"","customFeed":"","username":"","password":"","netShare":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set Node proxy variable","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=HTTP_PROXY]http://$(ZapHost):$(ZapPort)\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Remove previous session\nRemove-Item \"C:\\Users\\Administrator\\OWASP ZAP\\session\" -Force -Recurse -ErrorAction Ignore\n\n#Start Zap\n$location = Get-Location\ntry\n{\n    Set-Location \"C:\\Program Files\\OWASP\\Zed Attack Proxy\"\n    Start-Process -FilePath \"C:\\Program Files\\OWASP\\Zed Attack Proxy\\ZAP.exe\" -ArgumentList \"-host localhost -port $(ZapPort) -config api.key=$(ZapKey) -config start.checkforupdates=false -config database.newsession=NewSession -config database.newsessionprompt=false -newsession NewSession\"\n    For($i=0; $i -le 10; $i++)\n    {\n        Try\n        {\n            $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)\" -UseBasicParsing\n        }\n        Catch\n        {\n            Start-Sleep -Seconds 2\n        }\n    }\n    }\nfinally\n{\n    Set-Location \"$location\"\n    Start-Sleep -Seconds 2\n    }\n\n# Exclude urls from Zap proxy\nWrite-Host \"Excluding regex ^((?!(https:\\/\\/{Service url})).*)$\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/excludeFromProxy/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&regex=^((?!(https:\\/\\/{Service url})).*)$\" -UseBasicParsing","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare proxy","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"function Set-Proxy($proxy, $bypassUrls){\n    $proxyBytes = [system.Text.Encoding]::ASCII.GetBytes($proxy)\n    $bypassBytes = [system.Text.Encoding]::ASCII.GetBytes($bypassUrls)\n    $defaultConnectionSettings = [byte[]]@(@(70,0,0,0,06,0,0,0,03,0,0,0,$proxyBytes.Length,0,0,0)+$proxyBytes+@($bypassBytes.Length,0,0,0)+$bypassBytes+ @(1..36 | % {0}))\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path $registryPath -Name ProxyServer -Value $proxy\n    Set-ItemProperty -Path $registryPath -Name ProxyEnable -Value 1\n    Set-ItemProperty -Path \"$registryPath\\Connections\" -Name DefaultConnectionSettings -Value $defaultConnectionSettings\n    netsh winhttp set proxy proxy-server=$proxy bypass-list=$bypassUrls\n}\nSet-Proxy \"http=$(ZapHost):$(ZapPort);https=$(ZapHost):$(ZapPort)\" \"*.blob.core.windows.net\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Command Line Script","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"set NODE_EXTRA_CA_CERTS=C:\\Users\\Administrator\\Desktop\\owasp_zap_root_ca.cer","workingDirectory":"","failOnStderr":"false"}},{"taskId":"f75b2246-f2fc-46a1-b70d-a1e4f98a7468","version":"0.*","name":"Prepare ZAP","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":2,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targeturls":"$(ServiceQaUrl)","basepaths":"none","sessionpath":"$(Agent.TempDirectory)\\OWASP ZAP\\session","zaphost":"$(ZapHost)","zapkey":"$(ZapKey)","zapport":"$(ZapPort)"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"proxy exclusions","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=NO_PROXY].blob.core.windows.net,dev.azure.com,.visualstudio.com\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"ef087383-ee5e-42c7-9a53-ab56c98420f9","version":"2.*","name":"VsTest - testAssemblies","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testSelector":"testAssemblies","testAssemblyVer2":"**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**","testPlan":"","testSuite":"","testConfiguration":"","tcmTestRun":"$(test.RunId)","searchFolder":"$(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\","testFiltercriteria":"","runOnlyImpactedTests":"False","runAllTestsAfterXBuilds":"50","uiTests":"false","vstestLocationMethod":"version","vsTestVersion":"toolsInstaller","vstestLocation":"","runSettingsFile":"","overrideTestrunParameters":"","pathtoCustomTestAdapters":"","runInParallel":"False","runTestsInIsolation":"False","codeCoverageEnabled":"False","otherConsoleOptions":"","distributionBatchType":"basedOnTestCases","batchingBasedOnAgentsOption":"autoBatchSize","customBatchSizeValue":"10","batchingBasedOnExecutionTimeOption":"autoBatchSize","customRunTimePerBatchValue":"60","dontDistribute":"False","testRunTitle":"","platform":"","configuration":"","publishRunAttachments":"true","failOnMinTestsNotRun":"False","minimumExpectedTests":"1","diagnosticsEnabled":"True","collectDumpOn":"onAbortOnly","rerunFailedTests":"False","rerunType":"basedOnTestFailurePercentage","rerunFailedThreshold":"30","rerunFailedTestCasesMaxLimit":"5","rerunMaxAttempts":"3"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Get failed tests count","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeededOrFailed()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$token = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\":\" + $env:SYSTEM_ACCESSTOKEN))\n$headers = @{\n    \"Authorization\" = \"Basic $token\";\n    \"Content-Type\" = \"application/json\";\n}\n\n$releaseId = $(Release.ReleaseId)\n$releaseEnv = $(Release.EnvironmentId)\n$url = \"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/ResultSummaryByRelease?releaseId=$releaseId&releaseEnvId=$releaseEnv&includeFailureDetails=true\"\ntry {\n    $response = Invoke-WebRequest $url -headers $headers -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host \"Failed to get test results from this URL: $url. Make sure scripts are alowed to use OAuth token\"\n    throw $_\n}\n$content = ConvertFrom-Json $response.content\n\n$failedTestsCount = [int]$content.aggregatedResultsAnalysis.resultsByOutcome.Failed.Count\n$totalTestsCount = [int]$content.aggregatedResultsAnalysis.totalTests\n$notExecutedTestsCount = [int]$content.aggregatedResultsAnalysis.NotExecuted.Failed.Count\ntry {\n    $failedTestsThreshold = [int]\"0\"\n} catch {\n    Write-Host 'Missing FailedTestsThreshold variable, setting it to 0'\n    $failedTestsThreshold = 0\n}\n\nif($totalTestsCount -gt 0) {\n    Write-Host \"Failed tests count: $failedTestsCount\"\n    if(($failedTestsThreshold * 0.01) -ge ($failedTestsCount / ($totalTestsCount - $notExecutedTestsCount)))\n    {\n        Write-Host \"Enough tests passed for the active scan\";\n        Write-Host \"##vso[task.setvariable variable=ContinueActiveScan;]true\"\n    }\n    else\n    {\n        Write-Host \"##vso[task.logissue type=warning;] More than 0% of tests failed. Failed test threshold was exceeded\"\n        Write-Host \"##vso[task.setvariable variable=ContinueActiveScan;]false\"\n        throw \"Failed test threshold was exceeded\"\n    }\n} else {\n    Write-Host \"No tests were run or the results were not uploaded\";\n    Write-Host \"##vso[task.setvariable variable=ContinueActiveScan;]false\"\n    throw \"Error with test results\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set worker threads","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Setting 30 threads for active scan.\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/ascan/action/setOptionThreadPerHost/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&Integer=30\" -UseBasicParsing","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Run Active Scan","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Add-Type -Assembly System.Web\n\nfunction StartScan($url, $recurse, $inScopeOnly, $scanPolicyName, $method, $postData, $contextId)\n{\n    $url = [System.Web.HttpUtility]::UrlEncode($url)\n    $request = \"http://$(ZapHost):$(ZapPort)/JSON/ascan/action/scan/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&url=$url&recurse=$recurse&inScopeOnly=$inScopeOnly&scanPolicyName=$scanPolicyName&method=$method&postData=$postData&contextId=$contextId\"\n    try {\n        $response = Invoke-WebRequest $request -ErrorAction Stop -UseBasicParsing\n    } catch {\n        Write-Host 'Failed to start the scan'\n        throw $_\n    }\n    return $response\n}\n\nfunction GetStatus($scanId)\n{\n    $request = \"http://$(ZapHost):$(ZapPort)/JSON/ascan/view/status/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&scanId=$scanId\"\n    $try = 0\n    do {\n        $try += 1\n        try {\n            $response = Invoke-WebRequest $request -ErrorAction Stop -UseBasicParsing\n            $try = 11\n        } catch {\n            Start-Sleep -s 5\n            Write-Host 'Failed to get scan status'\n            if ($try -eq 11) {\n                Write-Host 'Stopping all scans'\n                Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/ascan/action/stopAllScans/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n                throw $_\n            }\n        }\n    } while ($try -le 10)\n    $obj = $response | ConvertFrom-Json\n    return [int]$obj.status\n}\n\nfunction ItemsToScan()\n{\n    try {\n        $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/pscan/view/recordsToScan/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -ErrorAction Stop -UseBasicParsing\n    } catch {\n        Write-Host 'Failed to check how many items are being passively scanned'\n        return 0\n    }\n    \n    $responseObject = ConvertFrom-Json $response\n    $responseObject.recordsToScan\n    return\n}\n\n$status = 0\nif (\"https://{Service url}\" -eq \"https://{Service url}\"){\n    Write-Host \"TargetUrl was not provided\"\n    throw $_\n}\n\nWrite-Host 'Starting scan'\n$startResponse = StartScan -url \"https://{Service url}\"\n$scanId = ($startResponse.Content | ConvertFrom-Json)\n\ndo\n{\n    Start-Sleep -s 60\n    $status = GetStatus -scanId $scanId\n    Write-Host \"Active scan status: $status%\"\n}\nwhile($status -lt 100)\n\nWrite-Host 'Active scan finished, waiting for passive scan to finish'\n# wait until passive scan is finished\n$itemsToScan=0\ndo\n{\n    Start-Sleep -s 60\n    $itemsToScan = ItemsToScan\n    Write-Host \"Items left to scan: $itemsToScan\"\n}\nwhile($itemsToScan -ne 0)","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"f06c3ffb-5dc9-4082-84f9-3a6379001af3","version":"0.*","name":"ZAP spider","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"spiderIgnore":""}},{"taskId":"bf805e43-f104-4e89-b467-7113a7b6a1dd","version":"0.*","name":"Active scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"scantimeout":""}},{"taskId":"0f07780f-f4c8-488d-bf43-d854a7b7c9cb","version":"0.*","name":"ZAP passive scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"scantimeout":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Generate Zap Report","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Generating ZAP JSON report'\ntry {\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/OTHER/core/other/jsonreport/?apikey=$(ZapKey)&formMethod=GET\" -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host 'Failed to generate ZAP JSON report'\n    throw $_\n}\n$response.content > \"$(System.DefaultWorkingDirectory)\\ZapActive.json\"\nWrite-Host 'JSON eport generated'\nWrite-Host 'Generating ZAP HTML report'\ntry {\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/OTHER/core/other/htmlreport/?apikey=$(ZapKey)&formMethod=GET\" -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host 'Failed to generate ZAP HTML report'\n    throw $_\n}\n$response.content > \"$(System.DefaultWorkingDirectory)\\ZapActiveHTML.html\"\nWrite-Host 'HTML report generated'","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Cleanup Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Getting ZAP rules'\n$try = 0\ndo {\n    $try += 1\n    try {\n        $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/view/rules/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -ErrorAction Stop -UseBasicParsing\n        $try = 11\n    } catch {\n        if ($try -eq 10) {\n            Write-Host '##vso[task.logissue type=warning;] Failed to get ZAP rules'\n        }\n    }\n} while ($try -lt 10)\n$content = $response.content\n$contentObject = $content | ConvertFrom-Json\n$rules = $contentObject.rules\nforeach($rule in $rules)\n{\n    # remove rules\n    Write-Host $rule.description\n    $ruleDescription = $rule.description\n    $try = 0\n    do {\n        $try += 1\n        try {\n            $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/action/removeRule/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&description=$ruleDescription\" -ErrorAction Stop -UseBasicParsing\n            $try = 11\n        } catch {\n            if ($try -eq 10) {\n                Write-Host '##vso[task.logissue type=warning;] ^^^^ Failed to remove this rule ^^^^'\n            }\n        }\n    } while ($try -lt 10)\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Shutdown Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"try\n{\n    Write-Host \"Shutting down Zap\"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/shutdown/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n    Write-Host \"Zap was shutdown\"\n    }\ncatch {\n    Write-Host \"Error occured while shutting down Zap\"\n    Write-Error $_.Exception.Message\n    }\n\n# Remove proxy settings\ntry\n{\n    Write-Host \"Removing proxy\"\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path \"$registryPath\" -Name \"ProxyEnable\" -Value 0 -Type Dword\n    Clear-ItemProperty -Path \"$registryPath\" -Name \"ProxyOverride\"\n    $signature = @'\n    [DllImport(\"wininet.dll\", SetLastError = true, CharSet=CharSet.Auto)]\npublic static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);\n'@\n    $INTERNET_OPTION_SETTINGS_CHANGED = 39\n    $INTERNET_OPTION_REFRESH = 37\n    $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru\n    $type::InternetSetOption(0, $INTERNET_OPTION_SETTINGS_CHANGED, 0, 0) | Out-Null\n    $type::InternetSetOption(0, $INTERNET_OPTION_REFRESH, 0, 0) | Out-Null\n    }\ncatch {\n    Write-Host \"Error occured while removing proxy\"\n    Write-Error $_.Exception.Message\n}\ntry {\n    write-host 'Removing WinHTTP proxy';\n    netsh winhttp reset proxy;\n} catch {\n    Write-host 'Failed to remove WinHTTP proxy';\n}\nWrite-Host \"##vso[task.setvariable variable=Get-Date;]$(ShortCode)_$($(Get-Date).ToString(\"yyyy.MM.dd\"))\";","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Send Zap Report to AppSec","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Upload report to AppSec\n$content = [IO.File]::ReadAllText(\"$(System.DefaultWorkingDirectory)\\ZapActive.json\")\n$reportName = \"ZapActive.json\"\n# VstsReleaseName is a name of a folder to which Scan will be uploaded to\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(Get-Date)\"\n    \"ReportName\"=\"$reportName\"\n    \"ReportContent\"=\"$content\"\n}\n# This header is required otherwise it will not upload correctly\n$headers = @{\n    \"Content-Type\" = \"application/json\"\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\n$retries = 0\nDO\n{\n    try\n    {\n        $response = Invoke-WebRequest -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -Headers $headers -UseBasicParsing\n    }\n    catch\n    {\n        Write-Host $_.Exception.Message\n    }\n    $retries++\n}\nWhile (($response.StatusCode -ne 200) -and ($retries -le 10))\nif($retries -eq 11)\n{\n    Write-Host \"Failed to upload to AppSec\"\n    throw $_\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Send Emails","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$emails = \"none\"\n$emails = $emails.Trim()\n\nif($emails -eq \"none\")\n{\n    return\n}\n$emails = $emails.replace(' ','')\n$emailsArray = $emails -split \";\"\n\nForeach($email in $emailsArray)\n{\n    $name = $email -replace '@bentley.com', \"\"\n    Write-Host \"Sending to $name to email '$email'\"\n    try\n    {\n        $response = Send-MailMessage -To \"$name $email\" -From \"ScanReports norepy@bentley.com\" -Subject \"$env:RELEASE_DEFINITIONNAME Scan report\" -Attachments \"$(System.DefaultWorkingDirectory)\\ZapActiveHTML.html\" -SmtpServer \"outmail.bentley.com\" -Body \"Release: $env:RELEASE_RELEASEWEBURL `nIf you would like to download ZAP session of this active scan, you can find it in this folder: https://bentley.sharepoint.com/sites/AppSec/$(ProductID)/Scan%20Reports/$(Get-Date) `nIf you wish to stop receiving these emails, you should go to release definition of this service, open 'Active scan' stage, select 'Task group: Active Scan' and remove your email from 'Emails' variable field\"\n    }\n    catch {\n        Write-Host \"##vso[task.logissue type=warning;] Error occured while sending email to $email\"\n        Write-Host $_.Exception.Message\n    }\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Waiting for ZAP to shut down","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Waiting for ZAP to shut down';\n$stillWait = $true;\nWhile ($stillWait) {\n    $pro = Get-Process javaw -ErrorAction Ignore;\n    if (!$pro) {\n        Write-Host 'ZAP exited';\n        $stillWait = $false;\n        break;\n    }\n    Write-Host 'Still waiting';\n    start-sleep 5;\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"d8b84976-e99a-4b86-b885-4849694435b0","version":"2.*","name":"Archive ZAP session","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"rootFolderOrFile":"$(Agent.TempDirectory)\\OWASP ZAP\\session","includeRootFolder":"true","archiveType":"zip","sevenZipCompression":"5","tarCompression":"gz","archiveFile":"$(Agent.TempDirectory)\\session.zip","replaceExistingArchive":"true","verbose":"false","quiet":"false"}},{"taskId":"78e95edd-975c-46cd-bfcc-4f4b22c1f792","version":"1.*","name":"Upload ZAP session to PSS","refName":"","enabled":true,"alwaysRun":false,"continueOnError":true,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinueActiveScan'], 'true'))","inputs":{"spUrl":"https://bentley.sharepoint.com/sites/AppSec/$(ProductID)","targetFolder":"/Scan%20Reports/$(Get-Date)","login":"$(SharePointServiceAccountUsername)","password":"$(SharePointServiceAccountPassword)","filesToUpload":"$(Agent.TempDirectory)\\session.zip"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"Manual","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]}},{"id":524381,"releaseId":47173,"name":"QA Staging Tests","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":11,"definitionEnvironmentId":5066,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":226,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Set Settings QA environment","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"copy /y $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings_QA.xml $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings.xml","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"2c65196a-54fd-4a02-9be8-d9d1837b7111","version":"1.*","name":"VsTest Platform Installer","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageFeedSelector":"nugetOrg","versionSelector":"latestPreRelease","testPlatformVersion":"","customFeed":"","username":"","password":"","netShare":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set Node proxy variable","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=HTTP_PROXY]http://$(ZapHost):$(ZapPort)\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Remove previous session\nRemove-Item \"C:\\Users\\Administrator\\OWASP ZAP\\session\" -Force -Recurse -ErrorAction Ignore\n\n#Start Zap\n$location = Get-Location\ntry\n{\n    Set-Location \"C:\\Program Files\\OWASP\\Zed Attack Proxy\"\n    Start-Process -FilePath \"C:\\Program Files\\OWASP\\Zed Attack Proxy\\ZAP.exe\" -ArgumentList \"-host localhost -port $(ZapPort) -config api.key=$(ZapKey) -config start.checkforupdates=false -config database.newsession=NewSession -config database.newsessionprompt=false -newsession NewSession\"\n    For($i=0; $i -le 10; $i++)\n    {\n        Try\n        {\n            $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)\" -UseBasicParsing\n        }\n        Catch\n        {\n            Start-Sleep -Seconds 2\n        }\n    }\n    }\nfinally\n{\n    Set-Location \"$location\"\n    Start-Sleep -Seconds 2\n    }\n\n# Exclude urls from Zap proxy\nWrite-Host \"Excluding regex ^((?!(https:\\/\\/{Service url})).*)$\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/excludeFromProxy/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&regex=^((?!(https:\\/\\/{Service url})).*)$\" -UseBasicParsing","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare proxy","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"function Set-Proxy($proxy, $bypassUrls){\n    $proxyBytes = [system.Text.Encoding]::ASCII.GetBytes($proxy)\n    $bypassBytes = [system.Text.Encoding]::ASCII.GetBytes($bypassUrls)\n    $defaultConnectionSettings = [byte[]]@(@(70,0,0,0,06,0,0,0,03,0,0,0,$proxyBytes.Length,0,0,0)+$proxyBytes+@($bypassBytes.Length,0,0,0)+$bypassBytes+ @(1..36 | % {0}))\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path $registryPath -Name ProxyServer -Value $proxy\n    Set-ItemProperty -Path $registryPath -Name ProxyEnable -Value 1\n    Set-ItemProperty -Path \"$registryPath\\Connections\" -Name DefaultConnectionSettings -Value $defaultConnectionSettings\n    netsh winhttp set proxy proxy-server=$proxy bypass-list=$bypassUrls\n}\nSet-Proxy \"http=$(ZapHost):$(ZapPort);https=$(ZapHost):$(ZapPort)\" \"*.blob.core.windows.net\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Command Line Script","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"set NODE_EXTRA_CA_CERTS=C:\\Users\\Administrator\\Desktop\\owasp_zap_root_ca.cer","workingDirectory":"","failOnStderr":"false"}},{"taskId":"f75b2246-f2fc-46a1-b70d-a1e4f98a7468","version":"0.*","name":"Prepare ZAP","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":2,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targeturls":"$(ServiceQaUrl)","basepaths":"none","sessionpath":"$(Agent.TempDirectory)\\OWASP ZAP\\session","zaphost":"$(ZapHost)","zapkey":"$(ZapKey)","zapport":"$(ZapPort)"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"proxy exclusions","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=NO_PROXY].blob.core.windows.net,dev.azure.com,.visualstudio.com\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"ef087383-ee5e-42c7-9a53-ab56c98420f9","version":"2.*","name":"VsTest - testAssemblies","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testSelector":"testAssemblies","testAssemblyVer2":"**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**","testPlan":"","testSuite":"","testConfiguration":"","tcmTestRun":"$(test.RunId)","searchFolder":"$(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\","testFiltercriteria":"","runOnlyImpactedTests":"False","runAllTestsAfterXBuilds":"50","uiTests":"false","vstestLocationMethod":"version","vsTestVersion":"toolsInstaller","vstestLocation":"","runSettingsFile":"","overrideTestrunParameters":"","pathtoCustomTestAdapters":"","runInParallel":"False","runTestsInIsolation":"False","codeCoverageEnabled":"False","otherConsoleOptions":"","distributionBatchType":"basedOnTestCases","batchingBasedOnAgentsOption":"autoBatchSize","customBatchSizeValue":"10","batchingBasedOnExecutionTimeOption":"autoBatchSize","customRunTimePerBatchValue":"60","dontDistribute":"False","testRunTitle":"","platform":"","configuration":"","publishRunAttachments":"true","failOnMinTestsNotRun":"False","minimumExpectedTests":"1","diagnosticsEnabled":"True","collectDumpOn":"onAbortOnly","rerunFailedTests":"False","rerunType":"basedOnTestFailurePercentage","rerunFailedThreshold":"30","rerunFailedTestCasesMaxLimit":"5","rerunMaxAttempts":"3"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Get failed tests count","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$token = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\":\" + $env:SYSTEM_ACCESSTOKEN))\n$headers = @{\n    \"Authorization\" = \"Basic $token\";\n    \"Content-Type\" = \"application/json\";\n}\n\n$releaseId = $(Release.ReleaseId)\n$releaseEnv = $(Release.EnvironmentId)\n$url = \"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/ResultSummaryByRelease?releaseId=$releaseId&releaseEnvId=$releaseEnv&includeFailureDetails=true\"\ntry {\n    $response = Invoke-WebRequest $url -headers $headers -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host \"Failed to get test results from this URL: $url. Make sure scripts are alowed to use OAuth token\"\n    throw $_\n}\n$content = ConvertFrom-Json $response.content\n\n$failedTestsCount = [int]$content.aggregatedResultsAnalysis.resultsByOutcome.Failed.Count\n$totalTestsCount = [int]$content.aggregatedResultsAnalysis.totalTests\n$notExecutedTestsCount = [int]$content.aggregatedResultsAnalysis.NotExecuted.Failed.Count\ntry {\n    $failedTestsThreshold = [int]\"0\"\n} catch {\n    Write-Host 'Missing FailedTestsThreshold variable, setting it to 0'\n    $failedTestsThreshold = 0\n}\n\nif($totalTestsCount -gt 0) {\n    Write-Host \"Failed tests count: $failedTestsCount\"\n    if(($failedTestsThreshold * 0.01) -ge ($failedTestsCount / ($totalTestsCount - $notExecutedTestsCount)))\n    {\n        Write-Host \"Enough tests passed for the passive scan\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n    }\n    else\n    {\n        Write-Host \"##vso[task.logissue type=warning;] More than 0% of tests failed. Failed test threshold was exceeded.\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    }\n} else {\n    Write-Host \"No tests were run or the results were not uploaded\";\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Check if requests were recorded","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$requests = Invoke-RestMethod \"http://$(ZapHost):$(ZapPort)/JSON/core/view/urls/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&baseurl=https://{Service url}\" -UseBasicParsing\nif($requests.urls.length -eq 0){\n    Write-Host \"##vso[task.logissue type=warning;] No requests to target URL recorded\"\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    throw $_\n} else {\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"b0a9eaf4-02f3-4dd3-a054-e29f5cdd0560","version":"0.*","name":"Check ZAP requests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{}},{"taskId":"0f07780f-f4c8-488d-bf43-d854a7b7c9cb","version":"0.*","name":"ZAP passive scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"scantimeout":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Generate Zap Report","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/OTHER/core/other/jsonreport/?apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$response.content > \"$(System.DefaultWorkingDirectory)\\ZapPassive.json\"\nWrite-Host \"Report generated to $(System.DefaultWorkingDirectory)\\ZapPassive.json\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Cleanup Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Cleaning Zap\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/view/rules/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$content = $response.content\n$contentObject = $content | ConvertFrom-Json\n$rules = $contentObject.rules\nforeach($rule in $rules)\n{\n    # remove rules\n    $ruleDescription = $rule.description\n    Write-Host \"Removing Replacer rule with name $ruleDescription \"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/action/removeRule/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&description=$ruleDescription\" -UseBasicParsing\n    Write-Host \"Successfully removed rule $ruleDescription\"\n}\nWrite-Host \"Finished cleaning Zap\"","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Shutdown Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"try\n{\n    Write-Host \"Shutting down Zap\"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/shutdown/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n    Write-Host \"Zap was shutdown\"\n    }\ncatch {\n    Write-Host \"Error occured while shutting down Zap\"\n    Write-Error $_.Exception.Message\n    }\n\n# Remove proxy settings\ntry\n{\n    Write-Host \"Removing proxy\"\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path \"$registryPath\" -Name \"ProxyEnable\" -Value 0 -Type Dword\n    Clear-ItemProperty -Path \"$registryPath\" -Name \"ProxyOverride\"\n    $signature = @'\n    [DllImport(\"wininet.dll\", SetLastError = true, CharSet=CharSet.Auto)]\npublic static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);\n'@\n    $INTERNET_OPTION_SETTINGS_CHANGED = 39\n    $INTERNET_OPTION_REFRESH = 37\n    $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru\n    $type::InternetSetOption(0, $INTERNET_OPTION_SETTINGS_CHANGED, 0, 0) | Out-Null\n    $type::InternetSetOption(0, $INTERNET_OPTION_REFRESH, 0, 0) | Out-Null\n    }\ncatch {\n    Write-Host \"Error occured while removing proxy\"\n    Write-Error $_.Exception.Message\n}\ntry {\n    write-host 'Removing WinHTTP proxy';\n    netsh winhttp reset proxy;\n} catch {\n    Write-host 'Failed to remove WinHTTP proxy';\n}\nWrite-Host \"##vso[task.setvariable variable=Get-Date;]$(ShortCode)_$($(Get-Date).ToString(\"yyyy.MM.dd\"))\";","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Send Zap Report to AppSec","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Upload report to AppSec\nWrite-Host \"Reding content from report.\"\n$content = [IO.File]::ReadAllText(\"$(System.DefaultWorkingDirectory)\\ZapPassive.json\")\nWrite-Host \"Read content successfully\"\nif($(System.TotalJobsInPhase) -gt 1)\n{\n    Write-Host \"Multiple jobs in phase were found. Appending $(System.JobPositionInPhase) to report name.\"\n    $reportName = \"ZapPassive_$(System.JobPositionInPhase).json\"\n} else \n{\n    Write-Host \"Single job in phase was found.\"\n    $reportName = \"ZapPassive.json\"\n}\n# VstsReleaseName is a name of a folder to which Scan will be uploaded to\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"$reportName\"\n    \"ReportContent\"=\"$content\"\n}\nWrite-Host \"GprId: $(ProductID)\"\nWrite-Host \"PssFolderName: $(ShortCode)_$(Build.BuildNumber)\"\nWrite-Host \"Report file name: $reportName\"\n$bodyContentJson = $bodyContent | ConvertTo-Json\n$retries = 0\nDO\n{\n    try\n    {\n        $response = Invoke-WebRequest -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json' -UseBasicParsing\n    }\n    catch\n    {\n        Write-Host $_.Exception.Message\n    }\n    $retries++\n}\nWhile (($response.StatusCode -ne 200) -and ($retries -lt 10))\nif($retries -eq 10)\n{\n    Write-Error \"Failed to upload to AppSec\"\n    throw $_\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"NMap scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$out = nmap -sS -sV -T3 -Pn -O -v --reason --open -p 1-65535 --privileged -oX - $targetStrippedUrl\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Nmap.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Sslyze scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$targetPort = $uri.Port\n$targetUrlWithPort = \"${targetStrippedUrl}:$targetPort\"\n$out = sslyze --regular --xml_out=- $targetUrlWithPort\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Sslyze.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Waiting for ZAP to shut down","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Waiting for ZAP to shut down';\n$stillWait = $true;\nWhile ($stillWait) {\n    $pro = Get-Process javaw -ErrorAction Ignore;\n    if (!$pro) {\n        Write-Host 'ZAP exited';\n        $stillWait = $false;\n        break;\n    }\n    Write-Host 'Still waiting';\n    start-sleep 5;\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":"runOnServer","name":"Agentless phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Manual Selenium Test Compliance Approval","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"The $(Release.DefinitionName) for $(Build.DefinitionName), $(Build.BuildNumber) QA Tests have been completed.\nIf the test run has failed and manual compliance exists, please provide the compliance link in the Manual Intervention Comment on VSTS and approve or reject as applicable:\n\n1. Selenium Test Compliance Report Link: \n\nReports stated must meet the release requirements for this deployment.\nhttps://bentley.sharepoint.com/sites/ReleaseServices/DevOpsToolGuide/VSTSDeploymentGuide.aspx","emailRecipients":"","onTimeout":"reject"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"Manual","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]}},{"id":524382,"releaseId":47173,"name":"PROD Staging Tests","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":12,"definitionEnvironmentId":5067,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":226,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Set Settings QA environment","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"copy /y $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings_QA.xml $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings.xml","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"2c65196a-54fd-4a02-9be8-d9d1837b7111","version":"1.*","name":"VsTest Platform Installer","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageFeedSelector":"nugetOrg","versionSelector":"latestPreRelease","testPlatformVersion":"","customFeed":"","username":"","password":"","netShare":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set Node proxy variable","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=HTTP_PROXY]http://$(ZapHost):$(ZapPort)\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Remove previous session\nRemove-Item \"C:\\Users\\Administrator\\OWASP ZAP\\session\" -Force -Recurse -ErrorAction Ignore\n\n#Start Zap\n$location = Get-Location\ntry\n{\n    Set-Location \"C:\\Program Files\\OWASP\\Zed Attack Proxy\"\n    Start-Process -FilePath \"C:\\Program Files\\OWASP\\Zed Attack Proxy\\ZAP.exe\" -ArgumentList \"-host localhost -port $(ZapPort) -config api.key=$(ZapKey) -config start.checkforupdates=false -config database.newsession=NewSession -config database.newsessionprompt=false -newsession NewSession\"\n    For($i=0; $i -le 10; $i++)\n    {\n        Try\n        {\n            $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)\" -UseBasicParsing\n        }\n        Catch\n        {\n            Start-Sleep -Seconds 2\n        }\n    }\n    }\nfinally\n{\n    Set-Location \"$location\"\n    Start-Sleep -Seconds 2\n    }\n\n# Exclude urls from Zap proxy\nWrite-Host \"Excluding regex ^((?!(https:\\/\\/{Service url})).*)$\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/excludeFromProxy/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&regex=^((?!(https:\\/\\/{Service url})).*)$\" -UseBasicParsing","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare proxy","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"function Set-Proxy($proxy, $bypassUrls){\n    $proxyBytes = [system.Text.Encoding]::ASCII.GetBytes($proxy)\n    $bypassBytes = [system.Text.Encoding]::ASCII.GetBytes($bypassUrls)\n    $defaultConnectionSettings = [byte[]]@(@(70,0,0,0,06,0,0,0,03,0,0,0,$proxyBytes.Length,0,0,0)+$proxyBytes+@($bypassBytes.Length,0,0,0)+$bypassBytes+ @(1..36 | % {0}))\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path $registryPath -Name ProxyServer -Value $proxy\n    Set-ItemProperty -Path $registryPath -Name ProxyEnable -Value 1\n    Set-ItemProperty -Path \"$registryPath\\Connections\" -Name DefaultConnectionSettings -Value $defaultConnectionSettings\n    netsh winhttp set proxy proxy-server=$proxy bypass-list=$bypassUrls\n}\nSet-Proxy \"http=$(ZapHost):$(ZapPort);https=$(ZapHost):$(ZapPort)\" \"*.blob.core.windows.net\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Command Line Script","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"set NODE_EXTRA_CA_CERTS=C:\\Users\\Administrator\\Desktop\\owasp_zap_root_ca.cer","workingDirectory":"","failOnStderr":"false"}},{"taskId":"f75b2246-f2fc-46a1-b70d-a1e4f98a7468","version":"0.*","name":"Prepare ZAP","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":2,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targeturls":"$(ServiceQaUrl)","basepaths":"none","sessionpath":"$(Agent.TempDirectory)\\OWASP ZAP\\session","zaphost":"$(ZapHost)","zapkey":"$(ZapKey)","zapport":"$(ZapPort)"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"proxy exclusions","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=NO_PROXY].blob.core.windows.net,dev.azure.com,.visualstudio.com\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"ef087383-ee5e-42c7-9a53-ab56c98420f9","version":"2.*","name":"VsTest - testAssemblies","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testSelector":"testAssemblies","testAssemblyVer2":"**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**","testPlan":"","testSuite":"","testConfiguration":"","tcmTestRun":"$(test.RunId)","searchFolder":"$(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\","testFiltercriteria":"","runOnlyImpactedTests":"False","runAllTestsAfterXBuilds":"50","uiTests":"false","vstestLocationMethod":"version","vsTestVersion":"toolsInstaller","vstestLocation":"","runSettingsFile":"","overrideTestrunParameters":"","pathtoCustomTestAdapters":"","runInParallel":"False","runTestsInIsolation":"False","codeCoverageEnabled":"False","otherConsoleOptions":"","distributionBatchType":"basedOnTestCases","batchingBasedOnAgentsOption":"autoBatchSize","customBatchSizeValue":"10","batchingBasedOnExecutionTimeOption":"autoBatchSize","customRunTimePerBatchValue":"60","dontDistribute":"False","testRunTitle":"","platform":"","configuration":"","publishRunAttachments":"true","failOnMinTestsNotRun":"False","minimumExpectedTests":"1","diagnosticsEnabled":"True","collectDumpOn":"onAbortOnly","rerunFailedTests":"False","rerunType":"basedOnTestFailurePercentage","rerunFailedThreshold":"30","rerunFailedTestCasesMaxLimit":"5","rerunMaxAttempts":"3"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Get failed tests count","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$token = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\":\" + $env:SYSTEM_ACCESSTOKEN))\n$headers = @{\n    \"Authorization\" = \"Basic $token\";\n    \"Content-Type\" = \"application/json\";\n}\n\n$releaseId = $(Release.ReleaseId)\n$releaseEnv = $(Release.EnvironmentId)\n$url = \"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/ResultSummaryByRelease?releaseId=$releaseId&releaseEnvId=$releaseEnv&includeFailureDetails=true\"\ntry {\n    $response = Invoke-WebRequest $url -headers $headers -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host \"Failed to get test results from this URL: $url. Make sure scripts are alowed to use OAuth token\"\n    throw $_\n}\n$content = ConvertFrom-Json $response.content\n\n$failedTestsCount = [int]$content.aggregatedResultsAnalysis.resultsByOutcome.Failed.Count\n$totalTestsCount = [int]$content.aggregatedResultsAnalysis.totalTests\n$notExecutedTestsCount = [int]$content.aggregatedResultsAnalysis.NotExecuted.Failed.Count\ntry {\n    $failedTestsThreshold = [int]\"0\"\n} catch {\n    Write-Host 'Missing FailedTestsThreshold variable, setting it to 0'\n    $failedTestsThreshold = 0\n}\n\nif($totalTestsCount -gt 0) {\n    Write-Host \"Failed tests count: $failedTestsCount\"\n    if(($failedTestsThreshold * 0.01) -ge ($failedTestsCount / ($totalTestsCount - $notExecutedTestsCount)))\n    {\n        Write-Host \"Enough tests passed for the passive scan\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n    }\n    else\n    {\n        Write-Host \"##vso[task.logissue type=warning;] More than 0% of tests failed. Failed test threshold was exceeded.\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    }\n} else {\n    Write-Host \"No tests were run or the results were not uploaded\";\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Check if requests were recorded","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$requests = Invoke-RestMethod \"http://$(ZapHost):$(ZapPort)/JSON/core/view/urls/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&baseurl=https://{Service url}\" -UseBasicParsing\nif($requests.urls.length -eq 0){\n    Write-Host \"##vso[task.logissue type=warning;] No requests to target URL recorded\"\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    throw $_\n} else {\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"b0a9eaf4-02f3-4dd3-a054-e29f5cdd0560","version":"0.*","name":"Check ZAP requests","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{}},{"taskId":"0f07780f-f4c8-488d-bf43-d854a7b7c9cb","version":"0.*","name":"ZAP passive scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"scantimeout":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Generate Zap Report","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/OTHER/core/other/jsonreport/?apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$response.content > \"$(System.DefaultWorkingDirectory)\\ZapPassive.json\"\nWrite-Host \"Report generated to $(System.DefaultWorkingDirectory)\\ZapPassive.json\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Cleanup Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Cleaning Zap\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/view/rules/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$content = $response.content\n$contentObject = $content | ConvertFrom-Json\n$rules = $contentObject.rules\nforeach($rule in $rules)\n{\n    # remove rules\n    $ruleDescription = $rule.description\n    Write-Host \"Removing Replacer rule with name $ruleDescription \"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/action/removeRule/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&description=$ruleDescription\" -UseBasicParsing\n    Write-Host \"Successfully removed rule $ruleDescription\"\n}\nWrite-Host \"Finished cleaning Zap\"","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Shutdown Zap","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"try\n{\n    Write-Host \"Shutting down Zap\"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/shutdown/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n    Write-Host \"Zap was shutdown\"\n    }\ncatch {\n    Write-Host \"Error occured while shutting down Zap\"\n    Write-Error $_.Exception.Message\n    }\n\n# Remove proxy settings\ntry\n{\n    Write-Host \"Removing proxy\"\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path \"$registryPath\" -Name \"ProxyEnable\" -Value 0 -Type Dword\n    Clear-ItemProperty -Path \"$registryPath\" -Name \"ProxyOverride\"\n    $signature = @'\n    [DllImport(\"wininet.dll\", SetLastError = true, CharSet=CharSet.Auto)]\npublic static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);\n'@\n    $INTERNET_OPTION_SETTINGS_CHANGED = 39\n    $INTERNET_OPTION_REFRESH = 37\n    $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru\n    $type::InternetSetOption(0, $INTERNET_OPTION_SETTINGS_CHANGED, 0, 0) | Out-Null\n    $type::InternetSetOption(0, $INTERNET_OPTION_REFRESH, 0, 0) | Out-Null\n    }\ncatch {\n    Write-Host \"Error occured while removing proxy\"\n    Write-Error $_.Exception.Message\n}\ntry {\n    write-host 'Removing WinHTTP proxy';\n    netsh winhttp reset proxy;\n} catch {\n    Write-host 'Failed to remove WinHTTP proxy';\n}\nWrite-Host \"##vso[task.setvariable variable=Get-Date;]$(ShortCode)_$($(Get-Date).ToString(\"yyyy.MM.dd\"))\";","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Send Zap Report to AppSec","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Upload report to AppSec\nWrite-Host \"Reding content from report.\"\n$content = [IO.File]::ReadAllText(\"$(System.DefaultWorkingDirectory)\\ZapPassive.json\")\nWrite-Host \"Read content successfully\"\nif($(System.TotalJobsInPhase) -gt 1)\n{\n    Write-Host \"Multiple jobs in phase were found. Appending $(System.JobPositionInPhase) to report name.\"\n    $reportName = \"ZapPassive_$(System.JobPositionInPhase).json\"\n} else \n{\n    Write-Host \"Single job in phase was found.\"\n    $reportName = \"ZapPassive.json\"\n}\n# VstsReleaseName is a name of a folder to which Scan will be uploaded to\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"$reportName\"\n    \"ReportContent\"=\"$content\"\n}\nWrite-Host \"GprId: $(ProductID)\"\nWrite-Host \"PssFolderName: $(ShortCode)_$(Build.BuildNumber)\"\nWrite-Host \"Report file name: $reportName\"\n$bodyContentJson = $bodyContent | ConvertTo-Json\n$retries = 0\nDO\n{\n    try\n    {\n        $response = Invoke-WebRequest -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json' -UseBasicParsing\n    }\n    catch\n    {\n        Write-Host $_.Exception.Message\n    }\n    $retries++\n}\nWhile (($response.StatusCode -ne 200) -and ($retries -lt 10))\nif($retries -eq 10)\n{\n    Write-Error \"Failed to upload to AppSec\"\n    throw $_\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"NMap scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$out = nmap -sS -sV -T3 -Pn -O -v --reason --open -p 1-65535 --privileged -oX - $targetStrippedUrl\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Nmap.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Sslyze scan","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$targetPort = $uri.Port\n$targetUrlWithPort = \"${targetStrippedUrl}:$targetPort\"\n$out = sslyze --regular --xml_out=- $targetUrlWithPort\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Sslyze.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Waiting for ZAP to shut down","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Waiting for ZAP to shut down';\n$stillWait = $true;\nWhile ($stillWait) {\n    $pro = Get-Process javaw -ErrorAction Ignore;\n    if (!$pro) {\n        Write-Host 'ZAP exited';\n        $stillWait = $false;\n        break;\n    }\n    Write-Host 'Still waiting';\n    start-sleep 5;\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":"runOnServer","name":"Agentless phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Manual Selenium Test Compliance Approval","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"The $(Release.DefinitionName) for $(Build.DefinitionName), $(Build.BuildNumber) QA Tests have been completed.\nIf the test run has failed and manual compliance exists, please provide the compliance link in the Manual Intervention Comment on VSTS and approve or reject as applicable:\n\n1. Selenium Test Compliance Report Link: \n\nReports stated must meet the release requirements for this deployment.\nhttps://bentley.sharepoint.com/sites/ReleaseServices/DevOpsToolGuide/VSTSDeploymentGuide.aspx","emailRecipients":"","onTimeout":"reject"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"Manual","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]}},{"id":524383,"releaseId":47173,"name":"QA Operational Tests","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":13,"definitionEnvironmentId":5068,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":226,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Set Settings QA environment","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"copy /y $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings_QA.xml $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings.xml","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"2c65196a-54fd-4a02-9be8-d9d1837b7111","version":"1.*","name":"VsTest Platform Installer","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageFeedSelector":"nugetOrg","versionSelector":"latestPreRelease","testPlatformVersion":"","customFeed":"","username":"","password":"","netShare":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set Node proxy variable","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=HTTP_PROXY]http://$(ZapHost):$(ZapPort)\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Remove previous session\nRemove-Item \"C:\\Users\\Administrator\\OWASP ZAP\\session\" -Force -Recurse -ErrorAction Ignore\n\n#Start Zap\n$location = Get-Location\ntry\n{\n    Set-Location \"C:\\Program Files\\OWASP\\Zed Attack Proxy\"\n    Start-Process -FilePath \"C:\\Program Files\\OWASP\\Zed Attack Proxy\\ZAP.exe\" -ArgumentList \"-host localhost -port $(ZapPort) -config api.key=$(ZapKey) -config start.checkforupdates=false -config database.newsession=NewSession -config database.newsessionprompt=false -newsession NewSession\"\n    For($i=0; $i -le 10; $i++)\n    {\n        Try\n        {\n            $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)\" -UseBasicParsing\n        }\n        Catch\n        {\n            Start-Sleep -Seconds 2\n        }\n    }\n    }\nfinally\n{\n    Set-Location \"$location\"\n    Start-Sleep -Seconds 2\n    }\n\n# Exclude urls from Zap proxy\nWrite-Host \"Excluding regex ^((?!(https:\\/\\/{Service url})).*)$\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/excludeFromProxy/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&regex=^((?!(https:\\/\\/{Service url})).*)$\" -UseBasicParsing","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare proxy","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"function Set-Proxy($proxy, $bypassUrls){\n    $proxyBytes = [system.Text.Encoding]::ASCII.GetBytes($proxy)\n    $bypassBytes = [system.Text.Encoding]::ASCII.GetBytes($bypassUrls)\n    $defaultConnectionSettings = [byte[]]@(@(70,0,0,0,06,0,0,0,03,0,0,0,$proxyBytes.Length,0,0,0)+$proxyBytes+@($bypassBytes.Length,0,0,0)+$bypassBytes+ @(1..36 | % {0}))\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path $registryPath -Name ProxyServer -Value $proxy\n    Set-ItemProperty -Path $registryPath -Name ProxyEnable -Value 1\n    Set-ItemProperty -Path \"$registryPath\\Connections\" -Name DefaultConnectionSettings -Value $defaultConnectionSettings\n    netsh winhttp set proxy proxy-server=$proxy bypass-list=$bypassUrls\n}\nSet-Proxy \"http=$(ZapHost):$(ZapPort);https=$(ZapHost):$(ZapPort)\" \"*.blob.core.windows.net\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Command Line Script","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"set NODE_EXTRA_CA_CERTS=C:\\Users\\Administrator\\Desktop\\owasp_zap_root_ca.cer","workingDirectory":"","failOnStderr":"false"}},{"taskId":"f75b2246-f2fc-46a1-b70d-a1e4f98a7468","version":"0.*","name":"Prepare ZAP","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":2,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targeturls":"$(ServiceQaUrl)","basepaths":"none","sessionpath":"$(Agent.TempDirectory)\\OWASP ZAP\\session","zaphost":"$(ZapHost)","zapkey":"$(ZapKey)","zapport":"$(ZapPort)"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"proxy exclusions","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=NO_PROXY].blob.core.windows.net,dev.azure.com,.visualstudio.com\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"ef087383-ee5e-42c7-9a53-ab56c98420f9","version":"2.*","name":"VsTest - testAssemblies","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testSelector":"testAssemblies","testAssemblyVer2":"**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**","testPlan":"","testSuite":"","testConfiguration":"","tcmTestRun":"$(test.RunId)","searchFolder":"$(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\","testFiltercriteria":"","runOnlyImpactedTests":"False","runAllTestsAfterXBuilds":"50","uiTests":"false","vstestLocationMethod":"version","vsTestVersion":"toolsInstaller","vstestLocation":"","runSettingsFile":"","overrideTestrunParameters":"","pathtoCustomTestAdapters":"","runInParallel":"False","runTestsInIsolation":"False","codeCoverageEnabled":"False","otherConsoleOptions":"","distributionBatchType":"basedOnTestCases","batchingBasedOnAgentsOption":"autoBatchSize","customBatchSizeValue":"10","batchingBasedOnExecutionTimeOption":"autoBatchSize","customRunTimePerBatchValue":"60","dontDistribute":"False","testRunTitle":"","platform":"","configuration":"","publishRunAttachments":"true","failOnMinTestsNotRun":"False","minimumExpectedTests":"1","diagnosticsEnabled":"True","collectDumpOn":"onAbortOnly","rerunFailedTests":"False","rerunType":"basedOnTestFailurePercentage","rerunFailedThreshold":"30","rerunFailedTestCasesMaxLimit":"5","rerunMaxAttempts":"3"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Get failed tests count","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$token = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\":\" + $env:SYSTEM_ACCESSTOKEN))\n$headers = @{\n    \"Authorization\" = \"Basic $token\";\n    \"Content-Type\" = \"application/json\";\n}\n\n$releaseId = $(Release.ReleaseId)\n$releaseEnv = $(Release.EnvironmentId)\n$url = \"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/ResultSummaryByRelease?releaseId=$releaseId&releaseEnvId=$releaseEnv&includeFailureDetails=true\"\ntry {\n    $response = Invoke-WebRequest $url -headers $headers -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host \"Failed to get test results from this URL: $url. Make sure scripts are alowed to use OAuth token\"\n    throw $_\n}\n$content = ConvertFrom-Json $response.content\n\n$failedTestsCount = [int]$content.aggregatedResultsAnalysis.resultsByOutcome.Failed.Count\n$totalTestsCount = [int]$content.aggregatedResultsAnalysis.totalTests\n$notExecutedTestsCount = [int]$content.aggregatedResultsAnalysis.NotExecuted.Failed.Count\ntry {\n    $failedTestsThreshold = [int]\"0\"\n} catch {\n    Write-Host 'Missing FailedTestsThreshold variable, setting it to 0'\n    $failedTestsThreshold = 0\n}\n\nif($totalTestsCount -gt 0) {\n    Write-Host \"Failed tests count: $failedTestsCount\"\n    if(($failedTestsThreshold * 0.01) -ge ($failedTestsCount / ($totalTestsCount - $notExecutedTestsCount)))\n    {\n        Write-Host \"Enough tests passed for the passive scan\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n    }\n    else\n    {\n        Write-Host \"##vso[task.logissue type=warning;] More than 0% of tests failed. Failed test threshold was exceeded.\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    }\n} else {\n    Write-Host \"No tests were run or the results were not uploaded\";\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Check if requests were recorded","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$requests = Invoke-RestMethod \"http://$(ZapHost):$(ZapPort)/JSON/core/view/urls/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&baseurl=https://{Service url}\" -UseBasicParsing\nif($requests.urls.length -eq 0){\n    Write-Host \"##vso[task.logissue type=warning;] No requests to target URL recorded\"\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    throw $_\n} else {\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"b0a9eaf4-02f3-4dd3-a054-e29f5cdd0560","version":"0.*","name":"Check ZAP requests","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{}},{"taskId":"0f07780f-f4c8-488d-bf43-d854a7b7c9cb","version":"0.*","name":"ZAP passive scan","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"scantimeout":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Generate Zap Report","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/OTHER/core/other/jsonreport/?apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$response.content > \"$(System.DefaultWorkingDirectory)\\ZapPassive.json\"\nWrite-Host \"Report generated to $(System.DefaultWorkingDirectory)\\ZapPassive.json\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Cleanup Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Cleaning Zap\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/view/rules/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$content = $response.content\n$contentObject = $content | ConvertFrom-Json\n$rules = $contentObject.rules\nforeach($rule in $rules)\n{\n    # remove rules\n    $ruleDescription = $rule.description\n    Write-Host \"Removing Replacer rule with name $ruleDescription \"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/action/removeRule/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&description=$ruleDescription\" -UseBasicParsing\n    Write-Host \"Successfully removed rule $ruleDescription\"\n}\nWrite-Host \"Finished cleaning Zap\"","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Shutdown Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"try\n{\n    Write-Host \"Shutting down Zap\"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/shutdown/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n    Write-Host \"Zap was shutdown\"\n    }\ncatch {\n    Write-Host \"Error occured while shutting down Zap\"\n    Write-Error $_.Exception.Message\n    }\n\n# Remove proxy settings\ntry\n{\n    Write-Host \"Removing proxy\"\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path \"$registryPath\" -Name \"ProxyEnable\" -Value 0 -Type Dword\n    Clear-ItemProperty -Path \"$registryPath\" -Name \"ProxyOverride\"\n    $signature = @'\n    [DllImport(\"wininet.dll\", SetLastError = true, CharSet=CharSet.Auto)]\npublic static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);\n'@\n    $INTERNET_OPTION_SETTINGS_CHANGED = 39\n    $INTERNET_OPTION_REFRESH = 37\n    $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru\n    $type::InternetSetOption(0, $INTERNET_OPTION_SETTINGS_CHANGED, 0, 0) | Out-Null\n    $type::InternetSetOption(0, $INTERNET_OPTION_REFRESH, 0, 0) | Out-Null\n    }\ncatch {\n    Write-Host \"Error occured while removing proxy\"\n    Write-Error $_.Exception.Message\n}\ntry {\n    write-host 'Removing WinHTTP proxy';\n    netsh winhttp reset proxy;\n} catch {\n    Write-host 'Failed to remove WinHTTP proxy';\n}\nWrite-Host \"##vso[task.setvariable variable=Get-Date;]$(ShortCode)_$($(Get-Date).ToString(\"yyyy.MM.dd\"))\";","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Send Zap Report to AppSec","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Upload report to AppSec\nWrite-Host \"Reding content from report.\"\n$content = [IO.File]::ReadAllText(\"$(System.DefaultWorkingDirectory)\\ZapPassive.json\")\nWrite-Host \"Read content successfully\"\nif($(System.TotalJobsInPhase) -gt 1)\n{\n    Write-Host \"Multiple jobs in phase were found. Appending $(System.JobPositionInPhase) to report name.\"\n    $reportName = \"ZapPassive_$(System.JobPositionInPhase).json\"\n} else \n{\n    Write-Host \"Single job in phase was found.\"\n    $reportName = \"ZapPassive.json\"\n}\n# VstsReleaseName is a name of a folder to which Scan will be uploaded to\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"$reportName\"\n    \"ReportContent\"=\"$content\"\n}\nWrite-Host \"GprId: $(ProductID)\"\nWrite-Host \"PssFolderName: $(ShortCode)_$(Build.BuildNumber)\"\nWrite-Host \"Report file name: $reportName\"\n$bodyContentJson = $bodyContent | ConvertTo-Json\n$retries = 0\nDO\n{\n    try\n    {\n        $response = Invoke-WebRequest -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json' -UseBasicParsing\n    }\n    catch\n    {\n        Write-Host $_.Exception.Message\n    }\n    $retries++\n}\nWhile (($response.StatusCode -ne 200) -and ($retries -lt 10))\nif($retries -eq 10)\n{\n    Write-Error \"Failed to upload to AppSec\"\n    throw $_\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"NMap scan","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$out = nmap -sS -sV -T3 -Pn -O -v --reason --open -p 1-65535 --privileged -oX - $targetStrippedUrl\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Nmap.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Sslyze scan","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$targetPort = $uri.Port\n$targetUrlWithPort = \"${targetStrippedUrl}:$targetPort\"\n$out = sslyze --regular --xml_out=- $targetUrlWithPort\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Sslyze.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Waiting for ZAP to shut down","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Waiting for ZAP to shut down';\n$stillWait = $true;\nWhile ($stillWait) {\n    $pro = Get-Process javaw -ErrorAction Ignore;\n    if (!$pro) {\n        Write-Host 'ZAP exited';\n        $stillWait = $false;\n        break;\n    }\n    Write-Host 'Still waiting';\n    start-sleep 5;\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":"runOnServer","name":"Agentless phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Manual Selenium Test Compliance Approval","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"The $(Release.DefinitionName) for $(Build.DefinitionName), $(Build.BuildNumber) QA Tests have been completed.\nIf the test run has failed and manual compliance exists, please provide the compliance link in the Manual Intervention Comment on VSTS and approve or reject as applicable:\n\n1. Selenium Test Compliance Report Link: \n\nReports stated must meet the release requirements for this deployment.\nhttps://bentley.sharepoint.com/sites/ReleaseServices/DevOpsToolGuide/VSTSDeploymentGuide.aspx","emailRecipients":"","onTimeout":"reject"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"Manual","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]}},{"id":524384,"releaseId":47173,"name":"PROD Operational Tests","status":"notStarted","variables":{},"variableGroups":[],"preDeployApprovals":[],"postDeployApprovals":[],"preApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"beforeGates"}},"postApprovalsSnapshot":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":0}],"approvalOptions":{"requiredApproverCount":0,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":"afterSuccessfulGates"}},"deploySteps":[],"rank":14,"definitionEnvironmentId":5069,"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[],"workflowTasks":[],"deployPhasesSnapshot":[{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"agentSpecification":null,"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[]},"queueId":226,"demands":[],"enableAccessToken":true,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":"agentBasedDeployment","name":"Agent phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Set Settings QA environment","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"copy /y $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings_QA.xml $(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\Settings.xml","workingDirectory":"","failOnStderr":"false"}},{"environment":{},"taskId":"2c65196a-54fd-4a02-9be8-d9d1837b7111","version":"1.*","name":"VsTest Platform Installer","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageFeedSelector":"nugetOrg","versionSelector":"latestPreRelease","testPlatformVersion":"","customFeed":"","username":"","password":"","netShare":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Set Node proxy variable","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=HTTP_PROXY]http://$(ZapHost):$(ZapPort)\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Remove previous session\nRemove-Item \"C:\\Users\\Administrator\\OWASP ZAP\\session\" -Force -Recurse -ErrorAction Ignore\n\n#Start Zap\n$location = Get-Location\ntry\n{\n    Set-Location \"C:\\Program Files\\OWASP\\Zed Attack Proxy\"\n    Start-Process -FilePath \"C:\\Program Files\\OWASP\\Zed Attack Proxy\\ZAP.exe\" -ArgumentList \"-host localhost -port $(ZapPort) -config api.key=$(ZapKey) -config start.checkforupdates=false -config database.newsession=NewSession -config database.newsessionprompt=false -newsession NewSession\"\n    For($i=0; $i -le 10; $i++)\n    {\n        Try\n        {\n            $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)\" -UseBasicParsing\n        }\n        Catch\n        {\n            Start-Sleep -Seconds 2\n        }\n    }\n    }\nfinally\n{\n    Set-Location \"$location\"\n    Start-Sleep -Seconds 2\n    }\n\n# Exclude urls from Zap proxy\nWrite-Host \"Excluding regex ^((?!(https:\\/\\/{Service url})).*)$\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/excludeFromProxy/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&regex=^((?!(https:\\/\\/{Service url})).*)$\" -UseBasicParsing","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Prepare proxy","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"function Set-Proxy($proxy, $bypassUrls){\n    $proxyBytes = [system.Text.Encoding]::ASCII.GetBytes($proxy)\n    $bypassBytes = [system.Text.Encoding]::ASCII.GetBytes($bypassUrls)\n    $defaultConnectionSettings = [byte[]]@(@(70,0,0,0,06,0,0,0,03,0,0,0,$proxyBytes.Length,0,0,0)+$proxyBytes+@($bypassBytes.Length,0,0,0)+$bypassBytes+ @(1..36 | % {0}))\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path $registryPath -Name ProxyServer -Value $proxy\n    Set-ItemProperty -Path $registryPath -Name ProxyEnable -Value 1\n    Set-ItemProperty -Path \"$registryPath\\Connections\" -Name DefaultConnectionSettings -Value $defaultConnectionSettings\n    netsh winhttp set proxy proxy-server=$proxy bypass-list=$bypassUrls\n}\nSet-Proxy \"http=$(ZapHost):$(ZapPort);https=$(ZapHost):$(ZapPort)\" \"*.blob.core.windows.net\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"d9bafed4-0b18-4f58-968d-86655b4d2ce9","version":"2.*","name":"Command Line Script","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"script":"set NODE_EXTRA_CA_CERTS=C:\\Users\\Administrator\\Desktop\\owasp_zap_root_ca.cer","workingDirectory":"","failOnStderr":"false"}},{"taskId":"f75b2246-f2fc-46a1-b70d-a1e4f98a7468","version":"0.*","name":"Prepare ZAP","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":2,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targeturls":"$(ServiceQaUrl)","basepaths":"none","sessionpath":"$(Agent.TempDirectory)\\OWASP ZAP\\session","zaphost":"$(ZapHost)","zapkey":"$(ZapKey)","zapport":"$(ZapPort)"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"proxy exclusions","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host (\"##vso[task.setvariable variable=NO_PROXY].blob.core.windows.net,dev.azure.com,.visualstudio.com\")","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"environment":{},"taskId":"ef087383-ee5e-42c7-9a53-ab56c98420f9","version":"2.*","name":"VsTest - testAssemblies","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"testSelector":"testAssemblies","testAssemblyVer2":"**\\*test*.dll\n!**\\*TestAdapter.dll\n!**\\obj\\**","testPlan":"","testSuite":"","testConfiguration":"","tcmTestRun":"$(test.RunId)","searchFolder":"$(System.DefaultWorkingDirectory)\\$(BUILD_DEFINITIONNAME)\\{test artifact name}\\","testFiltercriteria":"","runOnlyImpactedTests":"False","runAllTestsAfterXBuilds":"50","uiTests":"false","vstestLocationMethod":"version","vsTestVersion":"toolsInstaller","vstestLocation":"","runSettingsFile":"","overrideTestrunParameters":"","pathtoCustomTestAdapters":"","runInParallel":"False","runTestsInIsolation":"False","codeCoverageEnabled":"False","otherConsoleOptions":"","distributionBatchType":"basedOnTestCases","batchingBasedOnAgentsOption":"autoBatchSize","customBatchSizeValue":"10","batchingBasedOnExecutionTimeOption":"autoBatchSize","customRunTimePerBatchValue":"60","dontDistribute":"False","testRunTitle":"","platform":"","configuration":"","publishRunAttachments":"true","failOnMinTestsNotRun":"False","minimumExpectedTests":"1","diagnosticsEnabled":"True","collectDumpOn":"onAbortOnly","rerunFailedTests":"False","rerunType":"basedOnTestFailurePercentage","rerunFailedThreshold":"30","rerunFailedTestCasesMaxLimit":"5","rerunMaxAttempts":"3"}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Get failed tests count","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$token = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\":\" + $env:SYSTEM_ACCESSTOKEN))\n$headers = @{\n    \"Authorization\" = \"Basic $token\";\n    \"Content-Type\" = \"application/json\";\n}\n\n$releaseId = $(Release.ReleaseId)\n$releaseEnv = $(Release.EnvironmentId)\n$url = \"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/test/ResultSummaryByRelease?releaseId=$releaseId&releaseEnvId=$releaseEnv&includeFailureDetails=true\"\ntry {\n    $response = Invoke-WebRequest $url -headers $headers -ErrorAction Stop -UseBasicParsing\n} catch {\n    Write-Host \"Failed to get test results from this URL: $url. Make sure scripts are alowed to use OAuth token\"\n    throw $_\n}\n$content = ConvertFrom-Json $response.content\n\n$failedTestsCount = [int]$content.aggregatedResultsAnalysis.resultsByOutcome.Failed.Count\n$totalTestsCount = [int]$content.aggregatedResultsAnalysis.totalTests\n$notExecutedTestsCount = [int]$content.aggregatedResultsAnalysis.NotExecuted.Failed.Count\ntry {\n    $failedTestsThreshold = [int]\"0\"\n} catch {\n    Write-Host 'Missing FailedTestsThreshold variable, setting it to 0'\n    $failedTestsThreshold = 0\n}\n\nif($totalTestsCount -gt 0) {\n    Write-Host \"Failed tests count: $failedTestsCount\"\n    if(($failedTestsThreshold * 0.01) -ge ($failedTestsCount / ($totalTestsCount - $notExecutedTestsCount)))\n    {\n        Write-Host \"Enough tests passed for the passive scan\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n    }\n    else\n    {\n        Write-Host \"##vso[task.logissue type=warning;] More than 0% of tests failed. Failed test threshold was exceeded.\"\n        Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    }\n} else {\n    Write-Host \"No tests were run or the results were not uploaded\";\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Check if requests were recorded","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$requests = Invoke-RestMethod \"http://$(ZapHost):$(ZapPort)/JSON/core/view/urls/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&baseurl=https://{Service url}\" -UseBasicParsing\nif($requests.urls.length -eq 0){\n    Write-Host \"##vso[task.logissue type=warning;] No requests to target URL recorded\"\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]false\"\n    throw $_\n} else {\n    Write-Host \"##vso[task.setvariable variable=ContinuePassiveScan;]true\"\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"b0a9eaf4-02f3-4dd3-a054-e29f5cdd0560","version":"0.*","name":"Check ZAP requests","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{}},{"taskId":"0f07780f-f4c8-488d-bf43-d854a7b7c9cb","version":"0.*","name":"ZAP passive scan","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"scantimeout":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Generate Zap Report","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/OTHER/core/other/jsonreport/?apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$response.content > \"$(System.DefaultWorkingDirectory)\\ZapPassive.json\"\nWrite-Host \"Report generated to $(System.DefaultWorkingDirectory)\\ZapPassive.json\"","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Cleanup Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Cleaning Zap\"\n$response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/view/rules/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n$content = $response.content\n$contentObject = $content | ConvertFrom-Json\n$rules = $contentObject.rules\nforeach($rule in $rules)\n{\n    # remove rules\n    $ruleDescription = $rule.description\n    Write-Host \"Removing Replacer rule with name $ruleDescription \"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/replacer/action/removeRule/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET&description=$ruleDescription\" -UseBasicParsing\n    Write-Host \"Successfully removed rule $ruleDescription\"\n}\nWrite-Host \"Finished cleaning Zap\"","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Shutdown Zap","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"always()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"try\n{\n    Write-Host \"Shutting down Zap\"\n    $response = Invoke-WebRequest \"http://$(ZapHost):$(ZapPort)/JSON/core/action/shutdown/?zapapiformat=JSON&apikey=$(ZapKey)&formMethod=GET\" -UseBasicParsing\n    Write-Host \"Zap was shutdown\"\n    }\ncatch {\n    Write-Host \"Error occured while shutting down Zap\"\n    Write-Error $_.Exception.Message\n    }\n\n# Remove proxy settings\ntry\n{\n    Write-Host \"Removing proxy\"\n    $registryPath = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\"\n    Set-ItemProperty -Path \"$registryPath\" -Name \"ProxyEnable\" -Value 0 -Type Dword\n    Clear-ItemProperty -Path \"$registryPath\" -Name \"ProxyOverride\"\n    $signature = @'\n    [DllImport(\"wininet.dll\", SetLastError = true, CharSet=CharSet.Auto)]\npublic static extern bool InternetSetOption(IntPtr hInternet, int dwOption, IntPtr lpBuffer, int dwBufferLength);\n'@\n    $INTERNET_OPTION_SETTINGS_CHANGED = 39\n    $INTERNET_OPTION_REFRESH = 37\n    $type = Add-Type -MemberDefinition $signature -Name wininet -Namespace pinvoke -PassThru\n    $type::InternetSetOption(0, $INTERNET_OPTION_SETTINGS_CHANGED, 0, 0) | Out-Null\n    $type::InternetSetOption(0, $INTERNET_OPTION_REFRESH, 0, 0) | Out-Null\n    }\ncatch {\n    Write-Host \"Error occured while removing proxy\"\n    Write-Error $_.Exception.Message\n}\ntry {\n    write-host 'Removing WinHTTP proxy';\n    netsh winhttp reset proxy;\n} catch {\n    Write-host 'Failed to remove WinHTTP proxy';\n}\nWrite-Host \"##vso[task.setvariable variable=Get-Date;]$(ShortCode)_$($(Get-Date).ToString(\"yyyy.MM.dd\"))\";","errorActionPreference":"continue","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Send Zap Report to AppSec","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['ContinuePassiveScan'], 'true'))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# Upload report to AppSec\nWrite-Host \"Reding content from report.\"\n$content = [IO.File]::ReadAllText(\"$(System.DefaultWorkingDirectory)\\ZapPassive.json\")\nWrite-Host \"Read content successfully\"\nif($(System.TotalJobsInPhase) -gt 1)\n{\n    Write-Host \"Multiple jobs in phase were found. Appending $(System.JobPositionInPhase) to report name.\"\n    $reportName = \"ZapPassive_$(System.JobPositionInPhase).json\"\n} else \n{\n    Write-Host \"Single job in phase was found.\"\n    $reportName = \"ZapPassive.json\"\n}\n# VstsReleaseName is a name of a folder to which Scan will be uploaded to\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"$reportName\"\n    \"ReportContent\"=\"$content\"\n}\nWrite-Host \"GprId: $(ProductID)\"\nWrite-Host \"PssFolderName: $(ShortCode)_$(Build.BuildNumber)\"\nWrite-Host \"Report file name: $reportName\"\n$bodyContentJson = $bodyContent | ConvertTo-Json\n$retries = 0\nDO\n{\n    try\n    {\n        $response = Invoke-WebRequest -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json' -UseBasicParsing\n    }\n    catch\n    {\n        Write-Host $_.Exception.Message\n    }\n    $retries++\n}\nWhile (($response.StatusCode -ne 200) -and ($retries -lt 10))\nif($retries -eq 10)\n{\n    Write-Error \"Failed to upload to AppSec\"\n    throw $_\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"NMap scan","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$out = nmap -sS -sV -T3 -Pn -O -v --reason --open -p 1-65535 --privileged -oX - $targetStrippedUrl\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Nmap.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Sslyze scan","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"and(not(canceled()), eq(variables['System.JobPositionInPhase'],1))","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-host \"Generating report\"\n$uri = [System.Uri]\"https://{Service url}\"\n$targetStrippedUrl = $uri.Host\n$targetPort = $uri.Port\n$targetUrlWithPort = \"${targetStrippedUrl}:$targetPort\"\n$out = sslyze --regular --xml_out=- $targetUrlWithPort\n\n$bodyContent=@{\n    \"GprId\"=\"$(ProductID)\"\n    \"VstsReleaseName\"=\"$(ShortCode)_$(Build.BuildNumber)\"\n    \"ReportName\"=\"Sslyze.xml\"\n    \"ReportContent\"= $out | Out-String\n}\n$bodyContentJson = $bodyContent | ConvertTo-Json\nWrite-Host \"Sending report\"\n$response = Invoke-RestMethod -Uri \"$(MicrosoftFlowUrl)\" -Method Post -Body $bodyContentJson -ContentType 'application/json'\n","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}},{"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Waiting for ZAP to shut down","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"Write-Host 'Waiting for ZAP to shut down';\n$stillWait = $true;\nWhile ($stillWait) {\n    $pro = Get-Process javaw -ErrorAction Ignore;\n    if (!$pro) {\n        Write-Host 'ZAP exited';\n        $stillWait = $false;\n        break;\n    }\n    Write-Host 'Still waiting';\n    start-sleep 5;\n}","errorActionPreference":"stop","failOnStderr":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":""}}]},{"deploymentInput":{"parallelExecution":{"parallelExecutionType":"none"},"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":2,"phaseType":"runOnServer","name":"Agentless phase","refName":null,"workflowTasks":[{"environment":{},"taskId":"bcb64569-d51a-4af0-9c01-ea5d05b3b622","version":"8.*","name":"Manual Selenium Test Compliance Approval","refName":"","enabled":false,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"instructions":"The $(Release.DefinitionName) for $(Build.DefinitionName), $(Build.BuildNumber) QA Tests have been completed.\nIf the test run has failed and manual compliance exists, please provide the compliance link in the Manual Intervention Comment on VSTS and approve or reject as applicable:\n\n1. Selenium Test Compliance Report Link: \n\nReports stated must meet the release requirements for this deployment.\nhttps://bentley.sharepoint.com/sites/ReleaseServices/DevOpsToolGuide/VSTSDeploymentGuide.aspx","emailRecipients":"","onTimeout":"reject"}}]}],"owner":{"displayName":"[beconnect]\\CONNECT Portal","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/6d96c658-004f-4448-ac26-7c8d77e66b16","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"}},"id":"6d96c658-004f-4448-ac26-7c8d77e66b16","uniqueName":"vstfs:///Classification/TeamProject/b0172c41-1e3e-408d-8580-742fc7d85e61\\CONNECT Portal","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xMDkzNDA4Njg4LTEwNDIxODk2MzItMjIzOTc4ODA3OS0zMzUyODQ1OTIxLTEtMzY3MTk1MDgxMC02Njc3MTUyNS0yNzA3MTA5NzEwLTEzMTU4MTA4Mjg"},"schedules":[],"release":{"id":47173,"name":"URMGT_2020.1.7.1_master","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"}}},"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"},"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"}}},"releaseCreatedBy":{"displayName":"Ashish Srivastava","url":"https://spsprodcus2.vssps.visualstudio.com/A02a1a041-e8f4-4527-95e1-6fc0d2b4481e/_apis/Identities/b6995672-025c-4904-acb1-537a45e23b95","_links":{"avatar":{"href":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"}},"id":"b6995672-025c-4904-acb1-537a45e23b95","uniqueName":"Ashish.Srivastava@bentley.com","imageUrl":"https://dev.azure.com/bentleycs/_apis/GraphProfile/MemberAvatars/aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3","descriptor":"aad.Mjk2MDE2ZWQtZWMxOC03OTdkLWJmZWMtNmU5OTZlMmIyNDA3"},"triggerReason":"Manual","processParameters":{},"preDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGatesSnapshot":{"id":0,"gatesOptions":null,"gates":[]}}],"variables":{"Comments":{"value":"$(Release.ReleaseDescription)"},"DeploymentItems":{"value":""},"OctopusProjectId":{"value":"Projects-2061"},"OctopusProjectName":{"value":"User Management"},"PRGID":{"value":"2839"},"ProductID":{"value":"2945"},"ReleasePackageName":{"value":"CONNECT Web Interface"},"ReleaseType":{"value":"Internal/Bentley Colleagues"},"ServiceDevUrl":{"value":"https://dev-usermanagement.bentley.com/"},"ServiceProdUrl":{"value":"https://usermanagement.bentley.com/"},"ServiceQaUrl":{"value":"https://qa-usermanagement.bentley.com/"},"ShortCode":{"value":"URMGT"}},"variableGroups":[{"variables":{"MicrosoftFlowUrl":{"value":null,"isSecret":true},"Session":{"value":"NewSession"},"SessionsPath":{"value":"C:\\Users\\Administrator\\OWASP ZAP\\session"},"SharePointServiceAccountUsername":{"value":"sp-security-readwrite-svc@bentley.onmicrosoft.com"},"ZapExe":{"value":"ZAP.exe"},"ZapHost":{"value":"localhost"},"ZapKey":{"value":null,"isSecret":true},"ZapLocation":{"value":"C:\\Program Files\\OWASP\\Zed Attack Proxy"},"ZapPort":{"value":"8080"},"SharePointServiceAccountPassword":{"value":null,"isSecret":true}},"type":"Vsts","id":12,"name":"ZapSecurityScan","description":"Common variables used for Zap security scan","isShared":false,"variableGroupProjectReferences":null}],"artifacts":[{"sourceId":"b0172c41-1e3e-408d-8580-742fc7d85e61:1798","type":"Build","alias":"URMGT","definitionReference":{"artifactSourceDefinitionUrl":{"id":"https://dev.azure.com/bentleycs/_permalink/_build/index?collectionId=8b517d3f-052b-41e0-a7f6-e811999734c0&projectId=b0172c41-1e3e-408d-8580-742fc7d85e61&definitionId=1798","name":""},"branches":{"id":"master","name":"master"},"buildUri":{"id":"vstfs:///Build/Build/271062","name":null},"definition":{"id":"1798","name":"User Management"},"IsMultiDefinitionType":{"id":"False","name":"False"},"IsTriggeringArtifact":{"id":"True","name":"True"},"IsXamlBuildArtifactType":{"id":"False","name":null},"project":{"id":"b0172c41-1e3e-408d-8580-742fc7d85e61","name":"beconnect"},"repository.provider":{"id":"TfsGit","name":null},"repository":{"id":"f32c82e6-360d-4466-9d34-939605242291","name":"UserManagement"},"requestedFor":{"id":"Ashish Srivastava","name":null},"requestedForId":{"id":"b6995672-025c-4904-acb1-537a45e23b95","name":null},"sourceVersion":{"id":"b8da10048c422b3c9dac087dc66250ab5ece11ff","name":null},"version":{"id":"271062","name":"2020.1.7.1"},"artifactSourceVersionUrl":{"id":"https://dev.azure.com/bentleycs/_permalink/_build/index?collectionId=8b517d3f-052b-41e0-a7f6-e811999734c0&projectId=b0172c41-1e3e-408d-8580-742fc7d85e61&buildId=271062","name":""},"branch":{"id":"refs/heads/master","name":"refs/heads/master"}},"isPrimary":true,"isRetained":true}],"releaseDefinition":{"id":369,"name":"User Management (URMGT)","path":"\\CONNECT Web Interface","projectReference":null,"url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369","_links":{"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/definitions/369"},"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?definitionId=369"}}},"releaseDefinitionRevision":11,"description":"Triggered by User Management 2020.1.7.1.","reason":"continuousIntegration","releaseNameFormat":"$(ShortCode)_$(Build.BuildNumber)_$(build.SourceBranch)","keepForever":false,"definitionSnapshotRevision":1,"logsContainerUrl":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173/logs","url":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173","_links":{"self":{"href":"https://vsrm.dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_apis/Release/releases/47173"},"web":{"href":"https://dev.azure.com/bentleycs/b0172c41-1e3e-408d-8580-742fc7d85e61/_release?releaseId=47173&_a=release-summary"}},"tags":[],"triggeringArtifactAlias":null,"projectReference":{"id":"b0172c41-1e3e-408d-8580-742fc7d85e61","name":null},"properties":{}}